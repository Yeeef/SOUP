   yacc.py:3317:Created by PLY version 3.11 (http://www.dabeaz.com/ply)
   yacc.py:3368:
   yacc.py:3369:Unused terminals:
   yacc.py:3370:
   yacc.py:3373:    kIN
   yacc.py:3373:    kLABEL
   yacc.py:3373:    kPACKED
   yacc.py:3373:    kSET
   yacc.py:3373:    kWITH
   yacc.py:3377:
   yacc.py:3378:Grammar
   yacc.py:3379:
   yacc.py:3381:Rule 0     S' -> program
   yacc.py:3381:Rule 1     program -> program_head routine DOT
   yacc.py:3381:Rule 2     program_head -> kPROGRAM ID SEMICON
   yacc.py:3381:Rule 3     routine -> routine_head routine_body
   yacc.py:3381:Rule 4     routine_head -> const_part type_part var_part routine_part
   yacc.py:3381:Rule 5     const_part -> kCONST const_expr_list
   yacc.py:3381:Rule 6     const_part -> empty
   yacc.py:3381:Rule 7     const_expr_list -> const_expr_list const_expr
   yacc.py:3381:Rule 8     const_expr_list -> const_expr
   yacc.py:3381:Rule 9     const_expr -> ID EQUAL const_value SEMICON
   yacc.py:3381:Rule 10    const_expr -> error SEMICON
   yacc.py:3381:Rule 11    const_value -> INTEGER
   yacc.py:3381:Rule 12    const_value -> REAL
   yacc.py:3381:Rule 13    const_value -> CHAR
   yacc.py:3381:Rule 14    const_value -> STRING
   yacc.py:3381:Rule 15    const_value -> SYS_CON
   yacc.py:3381:Rule 16    type_part -> kTYPE type_decl_list
   yacc.py:3381:Rule 17    type_part -> empty
   yacc.py:3381:Rule 18    type_decl_list -> type_decl_list type_definition
   yacc.py:3381:Rule 19    type_decl_list -> type_definition
   yacc.py:3381:Rule 20    type_definition -> ID EQUAL type_decl SEMICON
   yacc.py:3381:Rule 21    type_definition -> ID EQUAL error SEMICON
   yacc.py:3381:Rule 22    type_decl -> simple_type_decl
   yacc.py:3381:Rule 23    type_decl -> array_type_decl
   yacc.py:3381:Rule 24    type_decl -> record_type_decl
   yacc.py:3381:Rule 25    simple_type_decl -> SYS_TYPE
   yacc.py:3381:Rule 26    simple_type_decl -> LP name_list RP
   yacc.py:3381:Rule 27    simple_type_decl -> const_value DOUBLEDOT const_value
   yacc.py:3381:Rule 28    simple_type_decl -> ID
   yacc.py:3381:Rule 29    array_type_decl -> kARRAY LB simple_type_decl RB kOF type_decl
   yacc.py:3381:Rule 30    record_type_decl -> kRECORD field_decl_list kEND
   yacc.py:3381:Rule 31    record_type_decl -> kRECORD error kEND
   yacc.py:3381:Rule 32    field_decl_list -> field_decl_list field_decl
   yacc.py:3381:Rule 33    field_decl_list -> field_decl
   yacc.py:3381:Rule 34    field_decl -> name_list COLON type_decl SEMICON
   yacc.py:3381:Rule 35    field_decl -> error SEMICON
   yacc.py:3381:Rule 36    name_list -> name_list COMMA ID
   yacc.py:3381:Rule 37    name_list -> ID
   yacc.py:3381:Rule 38    var_part -> kVAR var_decl_list
   yacc.py:3381:Rule 39    var_part -> empty
   yacc.py:3381:Rule 40    var_decl_list -> var_decl_list var_decl
   yacc.py:3381:Rule 41    var_decl_list -> var_decl
   yacc.py:3381:Rule 42    var_decl -> name_list COLON type_decl SEMICON
   yacc.py:3381:Rule 43    var_decl -> error SEMICON
   yacc.py:3381:Rule 44    routine_part -> routine_part function_decl
   yacc.py:3381:Rule 45    routine_part -> routine_part procedure_decl
   yacc.py:3381:Rule 46    routine_part -> function_decl
   yacc.py:3381:Rule 47    routine_part -> procedure_decl
   yacc.py:3381:Rule 48    routine_part -> empty
   yacc.py:3381:Rule 49    sub_routine -> routine
   yacc.py:3381:Rule 50    function_decl -> function_head SEMICON sub_routine SEMICON
   yacc.py:3381:Rule 51    function_decl -> function_head SEMICON error SEMICON
   yacc.py:3381:Rule 52    function_head -> kFUNCTION ID parameters COLON simple_type_decl
   yacc.py:3381:Rule 53    procedure_decl -> procedure_head SEMICON sub_routine SEMICON
   yacc.py:3381:Rule 54    procedure_decl -> procedure_head SEMICON error SEMICON
   yacc.py:3381:Rule 55    procedure_head -> kPROCEDURE ID parameters
   yacc.py:3381:Rule 56    parameters -> LP para_decl_list RP
   yacc.py:3381:Rule 57    parameters -> empty
   yacc.py:3381:Rule 58    para_decl_list -> para_decl_list SEMICON para_type_list
   yacc.py:3381:Rule 59    para_decl_list -> para_type_list
   yacc.py:3381:Rule 60    para_type_list -> var_para_list COLON simple_type_decl
   yacc.py:3381:Rule 61    para_type_list -> val_para_list COLON simple_type_decl
   yacc.py:3381:Rule 62    var_para_list -> kVAR name_list
   yacc.py:3381:Rule 63    val_para_list -> name_list
   yacc.py:3381:Rule 64    routine_body -> compound_stmt
   yacc.py:3381:Rule 65    compound_stmt -> kBEGIN stmt_list kEND
   yacc.py:3381:Rule 66    compound_stmt -> kBEGIN error kEND
   yacc.py:3381:Rule 67    stmt_list -> stmt_list stmt SEMICON
   yacc.py:3381:Rule 68    stmt_list -> empty
   yacc.py:3381:Rule 69    stmt_list -> stmt_list error SEMICON
   yacc.py:3381:Rule 70    stmt -> INTEGER COLON non_label_stmt
   yacc.py:3381:Rule 71    stmt -> non_label_stmt
   yacc.py:3381:Rule 72    non_label_stmt -> assign_stmt
   yacc.py:3381:Rule 73    non_label_stmt -> proc_stmt
   yacc.py:3381:Rule 74    non_label_stmt -> compound_stmt
   yacc.py:3381:Rule 75    non_label_stmt -> if_stmt
   yacc.py:3381:Rule 76    non_label_stmt -> repeat_stmt
   yacc.py:3381:Rule 77    non_label_stmt -> while_stmt
   yacc.py:3381:Rule 78    non_label_stmt -> for_stmt
   yacc.py:3381:Rule 79    non_label_stmt -> case_stmt
   yacc.py:3381:Rule 80    non_label_stmt -> goto_stmt
   yacc.py:3381:Rule 81    assign_stmt -> ID LB expression RB ASSIGN expression
   yacc.py:3381:Rule 82    assign_stmt -> ID DOT ID ASSIGN expression
   yacc.py:3381:Rule 83    assign_stmt -> ID ASSIGN expression
   yacc.py:3381:Rule 84    proc_stmt -> ID
   yacc.py:3381:Rule 85    proc_stmt -> ID LP args_list RP
   yacc.py:3381:Rule 86    proc_stmt -> SYS_PROC
   yacc.py:3381:Rule 87    proc_stmt -> SYS_PROC LP expression_list RP
   yacc.py:3381:Rule 88    proc_stmt -> kREAD LP factor RP
   yacc.py:3381:Rule 89    if_stmt -> kIF expression kTHEN stmt else_clause
   yacc.py:3381:Rule 90    else_clause -> kELSE stmt
   yacc.py:3381:Rule 91    else_clause -> empty
   yacc.py:3381:Rule 92    repeat_stmt -> kREPEAT stmt_list kUNTIL expression
   yacc.py:3381:Rule 93    while_stmt -> kWHILE expression kDO stmt
   yacc.py:3381:Rule 94    for_stmt -> kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:3381:Rule 95    direction -> kTO
   yacc.py:3381:Rule 96    direction -> kDOWNTO
   yacc.py:3381:Rule 97    case_stmt -> kCASE expression kOF case_expr_list kEND
   yacc.py:3381:Rule 98    case_expr_list -> case_expr_list case_expr
   yacc.py:3381:Rule 99    case_expr_list -> case_expr
   yacc.py:3381:Rule 100   case_expr -> const_value COLON stmt SEMICON
   yacc.py:3381:Rule 101   case_expr -> ID COLON stmt SEMICON
   yacc.py:3381:Rule 102   case_expr -> kELSE COLON stmt SEMICON
   yacc.py:3381:Rule 103   goto_stmt -> kGOTO INTEGER
   yacc.py:3381:Rule 104   expression_list -> expression_list COMMA expression
   yacc.py:3381:Rule 105   expression_list -> expression
   yacc.py:3381:Rule 106   expression -> expression GE expr
   yacc.py:3381:Rule 107   expression -> expression GT expr
   yacc.py:3381:Rule 108   expression -> expression LE expr
   yacc.py:3381:Rule 109   expression -> expression LT expr
   yacc.py:3381:Rule 110   expression -> expression EQUAL expr
   yacc.py:3381:Rule 111   expression -> expression UNEQUAL expr
   yacc.py:3381:Rule 112   expression -> expr
   yacc.py:3381:Rule 113   expr -> expr ADD term
   yacc.py:3381:Rule 114   expr -> expr SUBTRACT term
   yacc.py:3381:Rule 115   expr -> expr kOR term
   yacc.py:3381:Rule 116   expr -> term
   yacc.py:3381:Rule 117   term -> term MUL factor
   yacc.py:3381:Rule 118   term -> term kDIV factor
   yacc.py:3381:Rule 119   term -> term DIV factor
   yacc.py:3381:Rule 120   term -> term kMOD factor
   yacc.py:3381:Rule 121   term -> term kAND factor
   yacc.py:3381:Rule 122   term -> factor
   yacc.py:3381:Rule 123   factor -> SYS_FUNCT
   yacc.py:3381:Rule 124   factor -> ID LP args_list RP
   yacc.py:3381:Rule 125   factor -> SYS_FUNCT LP args_list RP
   yacc.py:3381:Rule 126   factor -> ID LB expression RB
   yacc.py:3381:Rule 127   factor -> ID
   yacc.py:3381:Rule 128   factor -> const_value
   yacc.py:3381:Rule 129   factor -> kNOT factor
   yacc.py:3381:Rule 130   factor -> SUBTRACT factor
   yacc.py:3381:Rule 131   factor -> LP expression RP
   yacc.py:3381:Rule 132   factor -> ID DOT ID
   yacc.py:3381:Rule 133   args_list -> args_list COMMA expression
   yacc.py:3381:Rule 134   args_list -> expression
   yacc.py:3381:Rule 135   empty -> <empty>
   yacc.py:3399:
   yacc.py:3400:Terminals, with rules where they appear
   yacc.py:3401:
   yacc.py:3405:ADD                  : 113
   yacc.py:3405:ASSIGN               : 81 82 83 94
   yacc.py:3405:CHAR                 : 13
   yacc.py:3405:COLON                : 34 42 52 60 61 70 100 101 102
   yacc.py:3405:COMMA                : 36 104 133
   yacc.py:3405:DIV                  : 119
   yacc.py:3405:DOT                  : 1 82 132
   yacc.py:3405:DOUBLEDOT            : 27
   yacc.py:3405:EQUAL                : 9 20 21 110
   yacc.py:3405:GE                   : 106
   yacc.py:3405:GT                   : 107
   yacc.py:3405:ID                   : 2 9 20 21 28 36 37 52 55 81 82 82 83 84 85 94 101 124 126 127 132 132
   yacc.py:3405:INTEGER              : 11 70 103
   yacc.py:3405:LB                   : 29 81 126
   yacc.py:3405:LE                   : 108
   yacc.py:3405:LP                   : 26 56 85 87 88 124 125 131
   yacc.py:3405:LT                   : 109
   yacc.py:3405:MUL                  : 117
   yacc.py:3405:RB                   : 29 81 126
   yacc.py:3405:REAL                 : 12
   yacc.py:3405:RP                   : 26 56 85 87 88 124 125 131
   yacc.py:3405:SEMICON              : 2 9 10 20 21 34 35 42 43 50 50 51 51 53 53 54 54 58 67 69 100 101 102
   yacc.py:3405:STRING               : 14
   yacc.py:3405:SUBTRACT             : 114 130
   yacc.py:3405:SYS_CON              : 15
   yacc.py:3405:SYS_FUNCT            : 123 125
   yacc.py:3405:SYS_PROC             : 86 87
   yacc.py:3405:SYS_TYPE             : 25
   yacc.py:3405:UNEQUAL              : 111
   yacc.py:3405:error                : 10 21 31 35 43 51 54 66 69
   yacc.py:3405:kAND                 : 121
   yacc.py:3405:kARRAY               : 29
   yacc.py:3405:kBEGIN               : 65 66
   yacc.py:3405:kCASE                : 97
   yacc.py:3405:kCONST               : 5
   yacc.py:3405:kDIV                 : 118
   yacc.py:3405:kDO                  : 93 94
   yacc.py:3405:kDOWNTO              : 96
   yacc.py:3405:kELSE                : 90 102
   yacc.py:3405:kEND                 : 30 31 65 66 97
   yacc.py:3405:kFOR                 : 94
   yacc.py:3405:kFUNCTION            : 52
   yacc.py:3405:kGOTO                : 103
   yacc.py:3405:kIF                  : 89
   yacc.py:3405:kIN                  : 
   yacc.py:3405:kLABEL               : 
   yacc.py:3405:kMOD                 : 120
   yacc.py:3405:kNOT                 : 129
   yacc.py:3405:kOF                  : 29 97
   yacc.py:3405:kOR                  : 115
   yacc.py:3405:kPACKED              : 
   yacc.py:3405:kPROCEDURE           : 55
   yacc.py:3405:kPROGRAM             : 2
   yacc.py:3405:kREAD                : 88
   yacc.py:3405:kRECORD              : 30 31
   yacc.py:3405:kREPEAT              : 92
   yacc.py:3405:kSET                 : 
   yacc.py:3405:kTHEN                : 89
   yacc.py:3405:kTO                  : 95
   yacc.py:3405:kTYPE                : 16
   yacc.py:3405:kUNTIL               : 92
   yacc.py:3405:kVAR                 : 38 62
   yacc.py:3405:kWHILE               : 93
   yacc.py:3405:kWITH                : 
   yacc.py:3407:
   yacc.py:3408:Nonterminals, with rules where they appear
   yacc.py:3409:
   yacc.py:3413:args_list            : 85 124 125 133
   yacc.py:3413:array_type_decl      : 23
   yacc.py:3413:assign_stmt          : 72
   yacc.py:3413:case_expr            : 98 99
   yacc.py:3413:case_expr_list       : 97 98
   yacc.py:3413:case_stmt            : 79
   yacc.py:3413:compound_stmt        : 64 74
   yacc.py:3413:const_expr           : 7 8
   yacc.py:3413:const_expr_list      : 5 7
   yacc.py:3413:const_part           : 4
   yacc.py:3413:const_value          : 9 27 27 100 128
   yacc.py:3413:direction            : 94
   yacc.py:3413:else_clause          : 89
   yacc.py:3413:empty                : 6 17 39 48 57 68 91
   yacc.py:3413:expr                 : 106 107 108 109 110 111 112 113 114 115
   yacc.py:3413:expression           : 81 81 82 83 89 92 93 94 94 97 104 105 106 107 108 109 110 111 126 131 133 134
   yacc.py:3413:expression_list      : 87 104
   yacc.py:3413:factor               : 88 117 118 119 120 121 122 129 130
   yacc.py:3413:field_decl           : 32 33
   yacc.py:3413:field_decl_list      : 30 32
   yacc.py:3413:for_stmt             : 78
   yacc.py:3413:function_decl        : 44 46
   yacc.py:3413:function_head        : 50 51
   yacc.py:3413:goto_stmt            : 80
   yacc.py:3413:if_stmt              : 75
   yacc.py:3413:name_list            : 26 34 36 42 62 63
   yacc.py:3413:non_label_stmt       : 70 71
   yacc.py:3413:para_decl_list       : 56 58
   yacc.py:3413:para_type_list       : 58 59
   yacc.py:3413:parameters           : 52 55
   yacc.py:3413:proc_stmt            : 73
   yacc.py:3413:procedure_decl       : 45 47
   yacc.py:3413:procedure_head       : 53 54
   yacc.py:3413:program              : 0
   yacc.py:3413:program_head         : 1
   yacc.py:3413:record_type_decl     : 24
   yacc.py:3413:repeat_stmt          : 76
   yacc.py:3413:routine              : 1 49
   yacc.py:3413:routine_body         : 3
   yacc.py:3413:routine_head         : 3
   yacc.py:3413:routine_part         : 4 44 45
   yacc.py:3413:simple_type_decl     : 22 29 52 60 61
   yacc.py:3413:stmt                 : 67 89 90 93 94 100 101 102
   yacc.py:3413:stmt_list            : 65 67 69 92
   yacc.py:3413:sub_routine          : 50 53
   yacc.py:3413:term                 : 113 114 115 116 117 118 119 120 121
   yacc.py:3413:type_decl            : 20 29 34 42
   yacc.py:3413:type_decl_list       : 16 18
   yacc.py:3413:type_definition      : 18 19
   yacc.py:3413:type_part            : 4
   yacc.py:3413:val_para_list        : 61
   yacc.py:3413:var_decl             : 40 41
   yacc.py:3413:var_decl_list        : 38 40
   yacc.py:3413:var_para_list        : 60
   yacc.py:3413:var_part             : 4
   yacc.py:3413:while_stmt           : 77
   yacc.py:3414:
   yacc.py:2543:Parsing method: LALR
   yacc.py:2561:
   yacc.py:2562:state 0
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> . program
   yacc.py:2565:    (1) program -> . program_head routine DOT
   yacc.py:2565:    (2) program_head -> . kPROGRAM ID SEMICON
   yacc.py:2566:
   yacc.py:2687:    kPROGRAM        shift and go to state 3
   yacc.py:2689:
   yacc.py:2714:    program                        shift and go to state 1
   yacc.py:2714:    program_head                   shift and go to state 2
   yacc.py:2561:
   yacc.py:2562:state 1
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> program .
   yacc.py:2566:
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 2
   yacc.py:2563:
   yacc.py:2565:    (1) program -> program_head . routine DOT
   yacc.py:2565:    (3) routine -> . routine_head routine_body
   yacc.py:2565:    (4) routine_head -> . const_part type_part var_part routine_part
   yacc.py:2565:    (5) const_part -> . kCONST const_expr_list
   yacc.py:2565:    (6) const_part -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    kCONST          shift and go to state 7
   yacc.py:2687:    kTYPE           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kVAR            reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFUNCTION       reduce using rule 135 (empty -> .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    routine                        shift and go to state 4
   yacc.py:2714:    routine_head                   shift and go to state 5
   yacc.py:2714:    const_part                     shift and go to state 6
   yacc.py:2714:    empty                          shift and go to state 8
   yacc.py:2561:
   yacc.py:2562:state 3
   yacc.py:2563:
   yacc.py:2565:    (2) program_head -> kPROGRAM . ID SEMICON
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 9
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 4
   yacc.py:2563:
   yacc.py:2565:    (1) program -> program_head routine . DOT
   yacc.py:2566:
   yacc.py:2687:    DOT             shift and go to state 10
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 5
   yacc.py:2563:
   yacc.py:2565:    (3) routine -> routine_head . routine_body
   yacc.py:2565:    (64) routine_body -> . compound_stmt
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2566:
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2689:
   yacc.py:2714:    routine_body                   shift and go to state 11
   yacc.py:2714:    compound_stmt                  shift and go to state 12
   yacc.py:2561:
   yacc.py:2562:state 6
   yacc.py:2563:
   yacc.py:2565:    (4) routine_head -> const_part . type_part var_part routine_part
   yacc.py:2565:    (16) type_part -> . kTYPE type_decl_list
   yacc.py:2565:    (17) type_part -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    kTYPE           shift and go to state 15
   yacc.py:2687:    kVAR            reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFUNCTION       reduce using rule 135 (empty -> .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    type_part                      shift and go to state 14
   yacc.py:2714:    empty                          shift and go to state 16
   yacc.py:2561:
   yacc.py:2562:state 7
   yacc.py:2563:
   yacc.py:2565:    (5) const_part -> kCONST . const_expr_list
   yacc.py:2565:    (7) const_expr_list -> . const_expr_list const_expr
   yacc.py:2565:    (8) const_expr_list -> . const_expr
   yacc.py:2565:    (9) const_expr -> . ID EQUAL const_value SEMICON
   yacc.py:2565:    (10) const_expr -> . error SEMICON
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 19
   yacc.py:2687:    error           shift and go to state 20
   yacc.py:2689:
   yacc.py:2714:    const_expr_list                shift and go to state 17
   yacc.py:2714:    const_expr                     shift and go to state 18
   yacc.py:2561:
   yacc.py:2562:state 8
   yacc.py:2563:
   yacc.py:2565:    (6) const_part -> empty .
   yacc.py:2566:
   yacc.py:2687:    kTYPE           reduce using rule 6 (const_part -> empty .)
   yacc.py:2687:    kVAR            reduce using rule 6 (const_part -> empty .)
   yacc.py:2687:    kFUNCTION       reduce using rule 6 (const_part -> empty .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 6 (const_part -> empty .)
   yacc.py:2687:    kBEGIN          reduce using rule 6 (const_part -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 9
   yacc.py:2563:
   yacc.py:2565:    (2) program_head -> kPROGRAM ID . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 21
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 10
   yacc.py:2563:
   yacc.py:2565:    (1) program -> program_head routine DOT .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 1 (program -> program_head routine DOT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 11
   yacc.py:2563:
   yacc.py:2565:    (3) routine -> routine_head routine_body .
   yacc.py:2566:
   yacc.py:2687:    DOT             reduce using rule 3 (routine -> routine_head routine_body .)
   yacc.py:2687:    SEMICON         reduce using rule 3 (routine -> routine_head routine_body .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 12
   yacc.py:2563:
   yacc.py:2565:    (64) routine_body -> compound_stmt .
   yacc.py:2566:
   yacc.py:2687:    DOT             reduce using rule 64 (routine_body -> compound_stmt .)
   yacc.py:2687:    SEMICON         reduce using rule 64 (routine_body -> compound_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 13
   yacc.py:2563:
   yacc.py:2565:    (65) compound_stmt -> kBEGIN . stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> kBEGIN . error kEND
   yacc.py:2565:    (67) stmt_list -> . stmt_list stmt SEMICON
   yacc.py:2565:    (68) stmt_list -> . empty
   yacc.py:2565:    (69) stmt_list -> . stmt_list error SEMICON
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2609:  ! shift/reduce conflict for error resolved as shift
   yacc.py:2687:    error           shift and go to state 23
   yacc.py:2687:    kEND            reduce using rule 135 (empty -> .)
   yacc.py:2687:    INTEGER         reduce using rule 135 (empty -> .)
   yacc.py:2687:    ID              reduce using rule 135 (empty -> .)
   yacc.py:2687:    SYS_PROC        reduce using rule 135 (empty -> .)
   yacc.py:2687:    kREAD           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2687:    kIF             reduce using rule 135 (empty -> .)
   yacc.py:2687:    kREPEAT         reduce using rule 135 (empty -> .)
   yacc.py:2687:    kWHILE          reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFOR            reduce using rule 135 (empty -> .)
   yacc.py:2687:    kCASE           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kGOTO           reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2696:  ! error           [ reduce using rule 135 (empty -> .) ]
   yacc.py:2700:
   yacc.py:2714:    stmt_list                      shift and go to state 22
   yacc.py:2714:    empty                          shift and go to state 24
   yacc.py:2561:
   yacc.py:2562:state 14
   yacc.py:2563:
   yacc.py:2565:    (4) routine_head -> const_part type_part . var_part routine_part
   yacc.py:2565:    (38) var_part -> . kVAR var_decl_list
   yacc.py:2565:    (39) var_part -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    kVAR            shift and go to state 26
   yacc.py:2687:    kFUNCTION       reduce using rule 135 (empty -> .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    var_part                       shift and go to state 25
   yacc.py:2714:    empty                          shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 15
   yacc.py:2563:
   yacc.py:2565:    (16) type_part -> kTYPE . type_decl_list
   yacc.py:2565:    (18) type_decl_list -> . type_decl_list type_definition
   yacc.py:2565:    (19) type_decl_list -> . type_definition
   yacc.py:2565:    (20) type_definition -> . ID EQUAL type_decl SEMICON
   yacc.py:2565:    (21) type_definition -> . ID EQUAL error SEMICON
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 30
   yacc.py:2689:
   yacc.py:2714:    type_decl_list                 shift and go to state 28
   yacc.py:2714:    type_definition                shift and go to state 29
   yacc.py:2561:
   yacc.py:2562:state 16
   yacc.py:2563:
   yacc.py:2565:    (17) type_part -> empty .
   yacc.py:2566:
   yacc.py:2687:    kVAR            reduce using rule 17 (type_part -> empty .)
   yacc.py:2687:    kFUNCTION       reduce using rule 17 (type_part -> empty .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 17 (type_part -> empty .)
   yacc.py:2687:    kBEGIN          reduce using rule 17 (type_part -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 17
   yacc.py:2563:
   yacc.py:2565:    (5) const_part -> kCONST const_expr_list .
   yacc.py:2565:    (7) const_expr_list -> const_expr_list . const_expr
   yacc.py:2565:    (9) const_expr -> . ID EQUAL const_value SEMICON
   yacc.py:2565:    (10) const_expr -> . error SEMICON
   yacc.py:2566:
   yacc.py:2687:    kTYPE           reduce using rule 5 (const_part -> kCONST const_expr_list .)
   yacc.py:2687:    kVAR            reduce using rule 5 (const_part -> kCONST const_expr_list .)
   yacc.py:2687:    kFUNCTION       reduce using rule 5 (const_part -> kCONST const_expr_list .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 5 (const_part -> kCONST const_expr_list .)
   yacc.py:2687:    kBEGIN          reduce using rule 5 (const_part -> kCONST const_expr_list .)
   yacc.py:2687:    ID              shift and go to state 19
   yacc.py:2687:    error           shift and go to state 20
   yacc.py:2689:
   yacc.py:2714:    const_expr                     shift and go to state 31
   yacc.py:2561:
   yacc.py:2562:state 18
   yacc.py:2563:
   yacc.py:2565:    (8) const_expr_list -> const_expr .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2687:    error           reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2687:    kTYPE           reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2687:    kVAR            reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2687:    kFUNCTION       reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2687:    kBEGIN          reduce using rule 8 (const_expr_list -> const_expr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 19
   yacc.py:2563:
   yacc.py:2565:    (9) const_expr -> ID . EQUAL const_value SEMICON
   yacc.py:2566:
   yacc.py:2687:    EQUAL           shift and go to state 32
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 20
   yacc.py:2563:
   yacc.py:2565:    (10) const_expr -> error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 33
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 21
   yacc.py:2563:
   yacc.py:2565:    (2) program_head -> kPROGRAM ID SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kCONST          reduce using rule 2 (program_head -> kPROGRAM ID SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 2 (program_head -> kPROGRAM ID SEMICON .)
   yacc.py:2687:    kTYPE           reduce using rule 2 (program_head -> kPROGRAM ID SEMICON .)
   yacc.py:2687:    kVAR            reduce using rule 2 (program_head -> kPROGRAM ID SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 2 (program_head -> kPROGRAM ID SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 2 (program_head -> kPROGRAM ID SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 22
   yacc.py:2563:
   yacc.py:2565:    (65) compound_stmt -> kBEGIN stmt_list . kEND
   yacc.py:2565:    (67) stmt_list -> stmt_list . stmt SEMICON
   yacc.py:2565:    (69) stmt_list -> stmt_list . error SEMICON
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    kEND            shift and go to state 34
   yacc.py:2687:    error           shift and go to state 36
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 35
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 23
   yacc.py:2563:
   yacc.py:2565:    (66) compound_stmt -> kBEGIN error . kEND
   yacc.py:2566:
   yacc.py:2687:    kEND            shift and go to state 57
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 24
   yacc.py:2563:
   yacc.py:2565:    (68) stmt_list -> empty .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    error           reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    INTEGER         reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    ID              reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    SYS_PROC        reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kREAD           reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kBEGIN          reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kIF             reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kREPEAT         reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kWHILE          reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kFOR            reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kCASE           reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kGOTO           reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2687:    kUNTIL          reduce using rule 68 (stmt_list -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 25
   yacc.py:2563:
   yacc.py:2565:    (4) routine_head -> const_part type_part var_part . routine_part
   yacc.py:2565:    (44) routine_part -> . routine_part function_decl
   yacc.py:2565:    (45) routine_part -> . routine_part procedure_decl
   yacc.py:2565:    (46) routine_part -> . function_decl
   yacc.py:2565:    (47) routine_part -> . procedure_decl
   yacc.py:2565:    (48) routine_part -> . empty
   yacc.py:2565:    (50) function_decl -> . function_head SEMICON sub_routine SEMICON
   yacc.py:2565:    (51) function_decl -> . function_head SEMICON error SEMICON
   yacc.py:2565:    (53) procedure_decl -> . procedure_head SEMICON sub_routine SEMICON
   yacc.py:2565:    (54) procedure_decl -> . procedure_head SEMICON error SEMICON
   yacc.py:2565:    (135) empty -> .
   yacc.py:2565:    (52) function_head -> . kFUNCTION ID parameters COLON simple_type_decl
   yacc.py:2565:    (55) procedure_head -> . kPROCEDURE ID parameters
   yacc.py:2566:
   yacc.py:2666:  ! shift/reduce conflict for kFUNCTION resolved as shift
   yacc.py:2666:  ! shift/reduce conflict for kPROCEDURE resolved as shift
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFUNCTION       shift and go to state 64
   yacc.py:2687:    kPROCEDURE      shift and go to state 65
   yacc.py:2689:
   yacc.py:2696:  ! kFUNCTION       [ reduce using rule 135 (empty -> .) ]
   yacc.py:2696:  ! kPROCEDURE      [ reduce using rule 135 (empty -> .) ]
   yacc.py:2700:
   yacc.py:2714:    routine_part                   shift and go to state 58
   yacc.py:2714:    function_decl                  shift and go to state 59
   yacc.py:2714:    procedure_decl                 shift and go to state 60
   yacc.py:2714:    empty                          shift and go to state 61
   yacc.py:2714:    function_head                  shift and go to state 62
   yacc.py:2714:    procedure_head                 shift and go to state 63
   yacc.py:2561:
   yacc.py:2562:state 26
   yacc.py:2563:
   yacc.py:2565:    (38) var_part -> kVAR . var_decl_list
   yacc.py:2565:    (40) var_decl_list -> . var_decl_list var_decl
   yacc.py:2565:    (41) var_decl_list -> . var_decl
   yacc.py:2565:    (42) var_decl -> . name_list COLON type_decl SEMICON
   yacc.py:2565:    (43) var_decl -> . error SEMICON
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    error           shift and go to state 69
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    var_decl_list                  shift and go to state 66
   yacc.py:2714:    var_decl                       shift and go to state 67
   yacc.py:2714:    name_list                      shift and go to state 68
   yacc.py:2561:
   yacc.py:2562:state 27
   yacc.py:2563:
   yacc.py:2565:    (39) var_part -> empty .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 39 (var_part -> empty .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 39 (var_part -> empty .)
   yacc.py:2687:    kBEGIN          reduce using rule 39 (var_part -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 28
   yacc.py:2563:
   yacc.py:2565:    (16) type_part -> kTYPE type_decl_list .
   yacc.py:2565:    (18) type_decl_list -> type_decl_list . type_definition
   yacc.py:2565:    (20) type_definition -> . ID EQUAL type_decl SEMICON
   yacc.py:2565:    (21) type_definition -> . ID EQUAL error SEMICON
   yacc.py:2566:
   yacc.py:2687:    kVAR            reduce using rule 16 (type_part -> kTYPE type_decl_list .)
   yacc.py:2687:    kFUNCTION       reduce using rule 16 (type_part -> kTYPE type_decl_list .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 16 (type_part -> kTYPE type_decl_list .)
   yacc.py:2687:    kBEGIN          reduce using rule 16 (type_part -> kTYPE type_decl_list .)
   yacc.py:2687:    ID              shift and go to state 30
   yacc.py:2689:
   yacc.py:2714:    type_definition                shift and go to state 71
   yacc.py:2561:
   yacc.py:2562:state 29
   yacc.py:2563:
   yacc.py:2565:    (19) type_decl_list -> type_definition .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 19 (type_decl_list -> type_definition .)
   yacc.py:2687:    kVAR            reduce using rule 19 (type_decl_list -> type_definition .)
   yacc.py:2687:    kFUNCTION       reduce using rule 19 (type_decl_list -> type_definition .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 19 (type_decl_list -> type_definition .)
   yacc.py:2687:    kBEGIN          reduce using rule 19 (type_decl_list -> type_definition .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 30
   yacc.py:2563:
   yacc.py:2565:    (20) type_definition -> ID . EQUAL type_decl SEMICON
   yacc.py:2565:    (21) type_definition -> ID . EQUAL error SEMICON
   yacc.py:2566:
   yacc.py:2687:    EQUAL           shift and go to state 72
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 31
   yacc.py:2563:
   yacc.py:2565:    (7) const_expr_list -> const_expr_list const_expr .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2687:    error           reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2687:    kTYPE           reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2687:    kVAR            reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2687:    kFUNCTION       reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2687:    kBEGIN          reduce using rule 7 (const_expr_list -> const_expr_list const_expr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 32
   yacc.py:2563:
   yacc.py:2565:    (9) const_expr -> ID EQUAL . const_value SEMICON
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    const_value                    shift and go to state 73
   yacc.py:2561:
   yacc.py:2562:state 33
   yacc.py:2563:
   yacc.py:2565:    (10) const_expr -> error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2687:    error           reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2687:    kTYPE           reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2687:    kVAR            reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 10 (const_expr -> error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 34
   yacc.py:2563:
   yacc.py:2565:    (65) compound_stmt -> kBEGIN stmt_list kEND .
   yacc.py:2566:
   yacc.py:2687:    DOT             reduce using rule 65 (compound_stmt -> kBEGIN stmt_list kEND .)
   yacc.py:2687:    SEMICON         reduce using rule 65 (compound_stmt -> kBEGIN stmt_list kEND .)
   yacc.py:2687:    kELSE           reduce using rule 65 (compound_stmt -> kBEGIN stmt_list kEND .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 35
   yacc.py:2563:
   yacc.py:2565:    (67) stmt_list -> stmt_list stmt . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 79
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 36
   yacc.py:2563:
   yacc.py:2565:    (69) stmt_list -> stmt_list error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 80
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 37
   yacc.py:2563:
   yacc.py:2565:    (70) stmt -> INTEGER . COLON non_label_stmt
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 81
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 38
   yacc.py:2563:
   yacc.py:2565:    (71) stmt -> non_label_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 71 (stmt -> non_label_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 71 (stmt -> non_label_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 39
   yacc.py:2563:
   yacc.py:2565:    (72) non_label_stmt -> assign_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 72 (non_label_stmt -> assign_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 72 (non_label_stmt -> assign_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 40
   yacc.py:2563:
   yacc.py:2565:    (73) non_label_stmt -> proc_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 73 (non_label_stmt -> proc_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 73 (non_label_stmt -> proc_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 41
   yacc.py:2563:
   yacc.py:2565:    (74) non_label_stmt -> compound_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 74 (non_label_stmt -> compound_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 74 (non_label_stmt -> compound_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 42
   yacc.py:2563:
   yacc.py:2565:    (75) non_label_stmt -> if_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 75 (non_label_stmt -> if_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 75 (non_label_stmt -> if_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 43
   yacc.py:2563:
   yacc.py:2565:    (76) non_label_stmt -> repeat_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 76 (non_label_stmt -> repeat_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 76 (non_label_stmt -> repeat_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 44
   yacc.py:2563:
   yacc.py:2565:    (77) non_label_stmt -> while_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 77 (non_label_stmt -> while_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 77 (non_label_stmt -> while_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 45
   yacc.py:2563:
   yacc.py:2565:    (78) non_label_stmt -> for_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 78 (non_label_stmt -> for_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 78 (non_label_stmt -> for_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 46
   yacc.py:2563:
   yacc.py:2565:    (79) non_label_stmt -> case_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 79 (non_label_stmt -> case_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 79 (non_label_stmt -> case_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 47
   yacc.py:2563:
   yacc.py:2565:    (80) non_label_stmt -> goto_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 80 (non_label_stmt -> goto_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 80 (non_label_stmt -> goto_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 48
   yacc.py:2563:
   yacc.py:2565:    (81) assign_stmt -> ID . LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> ID . DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> ID . ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> ID .
   yacc.py:2565:    (85) proc_stmt -> ID . LP args_list RP
   yacc.py:2566:
   yacc.py:2687:    LB              shift and go to state 82
   yacc.py:2687:    DOT             shift and go to state 84
   yacc.py:2687:    ASSIGN          shift and go to state 83
   yacc.py:2687:    SEMICON         reduce using rule 84 (proc_stmt -> ID .)
   yacc.py:2687:    kELSE           reduce using rule 84 (proc_stmt -> ID .)
   yacc.py:2687:    LP              shift and go to state 85
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 49
   yacc.py:2563:
   yacc.py:2565:    (86) proc_stmt -> SYS_PROC .
   yacc.py:2565:    (87) proc_stmt -> SYS_PROC . LP expression_list RP
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 86 (proc_stmt -> SYS_PROC .)
   yacc.py:2687:    kELSE           reduce using rule 86 (proc_stmt -> SYS_PROC .)
   yacc.py:2687:    LP              shift and go to state 86
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 50
   yacc.py:2563:
   yacc.py:2565:    (88) proc_stmt -> kREAD . LP factor RP
   yacc.py:2566:
   yacc.py:2687:    LP              shift and go to state 87
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 51
   yacc.py:2563:
   yacc.py:2565:    (89) if_stmt -> kIF . expression kTHEN stmt else_clause
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 88
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 52
   yacc.py:2563:
   yacc.py:2565:    (92) repeat_stmt -> kREPEAT . stmt_list kUNTIL expression
   yacc.py:2565:    (67) stmt_list -> . stmt_list stmt SEMICON
   yacc.py:2565:    (68) stmt_list -> . empty
   yacc.py:2565:    (69) stmt_list -> . stmt_list error SEMICON
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    kUNTIL          reduce using rule 135 (empty -> .)
   yacc.py:2687:    error           reduce using rule 135 (empty -> .)
   yacc.py:2687:    INTEGER         reduce using rule 135 (empty -> .)
   yacc.py:2687:    ID              reduce using rule 135 (empty -> .)
   yacc.py:2687:    SYS_PROC        reduce using rule 135 (empty -> .)
   yacc.py:2687:    kREAD           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2687:    kIF             reduce using rule 135 (empty -> .)
   yacc.py:2687:    kREPEAT         reduce using rule 135 (empty -> .)
   yacc.py:2687:    kWHILE          reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFOR            reduce using rule 135 (empty -> .)
   yacc.py:2687:    kCASE           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kGOTO           reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    stmt_list                      shift and go to state 98
   yacc.py:2714:    empty                          shift and go to state 24
   yacc.py:2561:
   yacc.py:2562:state 53
   yacc.py:2563:
   yacc.py:2565:    (93) while_stmt -> kWHILE . expression kDO stmt
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 99
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 54
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR . ID ASSIGN expression direction expression kDO stmt
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 100
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 55
   yacc.py:2563:
   yacc.py:2565:    (97) case_stmt -> kCASE . expression kOF case_expr_list kEND
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 101
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 56
   yacc.py:2563:
   yacc.py:2565:    (103) goto_stmt -> kGOTO . INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 102
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 57
   yacc.py:2563:
   yacc.py:2565:    (66) compound_stmt -> kBEGIN error kEND .
   yacc.py:2566:
   yacc.py:2687:    DOT             reduce using rule 66 (compound_stmt -> kBEGIN error kEND .)
   yacc.py:2687:    SEMICON         reduce using rule 66 (compound_stmt -> kBEGIN error kEND .)
   yacc.py:2687:    kELSE           reduce using rule 66 (compound_stmt -> kBEGIN error kEND .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 58
   yacc.py:2563:
   yacc.py:2565:    (4) routine_head -> const_part type_part var_part routine_part .
   yacc.py:2565:    (44) routine_part -> routine_part . function_decl
   yacc.py:2565:    (45) routine_part -> routine_part . procedure_decl
   yacc.py:2565:    (50) function_decl -> . function_head SEMICON sub_routine SEMICON
   yacc.py:2565:    (51) function_decl -> . function_head SEMICON error SEMICON
   yacc.py:2565:    (53) procedure_decl -> . procedure_head SEMICON sub_routine SEMICON
   yacc.py:2565:    (54) procedure_decl -> . procedure_head SEMICON error SEMICON
   yacc.py:2565:    (52) function_head -> . kFUNCTION ID parameters COLON simple_type_decl
   yacc.py:2565:    (55) procedure_head -> . kPROCEDURE ID parameters
   yacc.py:2566:
   yacc.py:2687:    kBEGIN          reduce using rule 4 (routine_head -> const_part type_part var_part routine_part .)
   yacc.py:2687:    kFUNCTION       shift and go to state 64
   yacc.py:2687:    kPROCEDURE      shift and go to state 65
   yacc.py:2689:
   yacc.py:2714:    function_decl                  shift and go to state 103
   yacc.py:2714:    procedure_decl                 shift and go to state 104
   yacc.py:2714:    function_head                  shift and go to state 62
   yacc.py:2714:    procedure_head                 shift and go to state 63
   yacc.py:2561:
   yacc.py:2562:state 59
   yacc.py:2563:
   yacc.py:2565:    (46) routine_part -> function_decl .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 46 (routine_part -> function_decl .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 46 (routine_part -> function_decl .)
   yacc.py:2687:    kBEGIN          reduce using rule 46 (routine_part -> function_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 60
   yacc.py:2563:
   yacc.py:2565:    (47) routine_part -> procedure_decl .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 47 (routine_part -> procedure_decl .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 47 (routine_part -> procedure_decl .)
   yacc.py:2687:    kBEGIN          reduce using rule 47 (routine_part -> procedure_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 61
   yacc.py:2563:
   yacc.py:2565:    (48) routine_part -> empty .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 48 (routine_part -> empty .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 48 (routine_part -> empty .)
   yacc.py:2687:    kBEGIN          reduce using rule 48 (routine_part -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 62
   yacc.py:2563:
   yacc.py:2565:    (50) function_decl -> function_head . SEMICON sub_routine SEMICON
   yacc.py:2565:    (51) function_decl -> function_head . SEMICON error SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 105
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 63
   yacc.py:2563:
   yacc.py:2565:    (53) procedure_decl -> procedure_head . SEMICON sub_routine SEMICON
   yacc.py:2565:    (54) procedure_decl -> procedure_head . SEMICON error SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 106
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 64
   yacc.py:2563:
   yacc.py:2565:    (52) function_head -> kFUNCTION . ID parameters COLON simple_type_decl
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 107
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 65
   yacc.py:2563:
   yacc.py:2565:    (55) procedure_head -> kPROCEDURE . ID parameters
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 108
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 66
   yacc.py:2563:
   yacc.py:2565:    (38) var_part -> kVAR var_decl_list .
   yacc.py:2565:    (40) var_decl_list -> var_decl_list . var_decl
   yacc.py:2565:    (42) var_decl -> . name_list COLON type_decl SEMICON
   yacc.py:2565:    (43) var_decl -> . error SEMICON
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 38 (var_part -> kVAR var_decl_list .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 38 (var_part -> kVAR var_decl_list .)
   yacc.py:2687:    kBEGIN          reduce using rule 38 (var_part -> kVAR var_decl_list .)
   yacc.py:2687:    error           shift and go to state 69
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    var_decl                       shift and go to state 109
   yacc.py:2714:    name_list                      shift and go to state 68
   yacc.py:2561:
   yacc.py:2562:state 67
   yacc.py:2563:
   yacc.py:2565:    (41) var_decl_list -> var_decl .
   yacc.py:2566:
   yacc.py:2687:    error           reduce using rule 41 (var_decl_list -> var_decl .)
   yacc.py:2687:    ID              reduce using rule 41 (var_decl_list -> var_decl .)
   yacc.py:2687:    kFUNCTION       reduce using rule 41 (var_decl_list -> var_decl .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 41 (var_decl_list -> var_decl .)
   yacc.py:2687:    kBEGIN          reduce using rule 41 (var_decl_list -> var_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 68
   yacc.py:2563:
   yacc.py:2565:    (42) var_decl -> name_list . COLON type_decl SEMICON
   yacc.py:2565:    (36) name_list -> name_list . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 110
   yacc.py:2687:    COMMA           shift and go to state 111
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 69
   yacc.py:2563:
   yacc.py:2565:    (43) var_decl -> error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 112
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 70
   yacc.py:2563:
   yacc.py:2565:    (37) name_list -> ID .
   yacc.py:2566:
   yacc.py:2687:    COLON           reduce using rule 37 (name_list -> ID .)
   yacc.py:2687:    COMMA           reduce using rule 37 (name_list -> ID .)
   yacc.py:2687:    RP              reduce using rule 37 (name_list -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 71
   yacc.py:2563:
   yacc.py:2565:    (18) type_decl_list -> type_decl_list type_definition .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 18 (type_decl_list -> type_decl_list type_definition .)
   yacc.py:2687:    kVAR            reduce using rule 18 (type_decl_list -> type_decl_list type_definition .)
   yacc.py:2687:    kFUNCTION       reduce using rule 18 (type_decl_list -> type_decl_list type_definition .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 18 (type_decl_list -> type_decl_list type_definition .)
   yacc.py:2687:    kBEGIN          reduce using rule 18 (type_decl_list -> type_decl_list type_definition .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 72
   yacc.py:2563:
   yacc.py:2565:    (20) type_definition -> ID EQUAL . type_decl SEMICON
   yacc.py:2565:    (21) type_definition -> ID EQUAL . error SEMICON
   yacc.py:2565:    (22) type_decl -> . simple_type_decl
   yacc.py:2565:    (23) type_decl -> . array_type_decl
   yacc.py:2565:    (24) type_decl -> . record_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (29) array_type_decl -> . kARRAY LB simple_type_decl RB kOF type_decl
   yacc.py:2565:    (30) record_type_decl -> . kRECORD field_decl_list kEND
   yacc.py:2565:    (31) record_type_decl -> . kRECORD error kEND
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    error           shift and go to state 115
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    kARRAY          shift and go to state 122
   yacc.py:2687:    kRECORD         shift and go to state 123
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    type_decl                      shift and go to state 114
   yacc.py:2714:    simple_type_decl               shift and go to state 116
   yacc.py:2714:    array_type_decl                shift and go to state 117
   yacc.py:2714:    record_type_decl               shift and go to state 118
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 73
   yacc.py:2563:
   yacc.py:2565:    (9) const_expr -> ID EQUAL const_value . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 124
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 74
   yacc.py:2563:
   yacc.py:2565:    (11) const_value -> INTEGER .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    MUL             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kDIV            reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    DIV             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kMOD            reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kAND            reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    ADD             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    SUBTRACT        reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kOR             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kTHEN           reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    GE              reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    GT              reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    LE              reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    LT              reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    EQUAL           reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    UNEQUAL         reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kDO             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kOF             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    DOUBLEDOT       reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    RB              reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kELSE           reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    RP              reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    COMMA           reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kTO             reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    kDOWNTO         reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2687:    COLON           reduce using rule 11 (const_value -> INTEGER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 75
   yacc.py:2563:
   yacc.py:2565:    (12) const_value -> REAL .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    MUL             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kDIV            reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    DIV             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kMOD            reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kAND            reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    ADD             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    SUBTRACT        reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kOR             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kTHEN           reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    GE              reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    GT              reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    LE              reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    LT              reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    EQUAL           reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    UNEQUAL         reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kDO             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kOF             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    DOUBLEDOT       reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    RB              reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kELSE           reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    RP              reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    COMMA           reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kTO             reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    kDOWNTO         reduce using rule 12 (const_value -> REAL .)
   yacc.py:2687:    COLON           reduce using rule 12 (const_value -> REAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 76
   yacc.py:2563:
   yacc.py:2565:    (13) const_value -> CHAR .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    MUL             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kDIV            reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    DIV             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kMOD            reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kAND            reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    ADD             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    SUBTRACT        reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kOR             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kTHEN           reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    GE              reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    GT              reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    LE              reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    LT              reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    EQUAL           reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    UNEQUAL         reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kDO             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kOF             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    DOUBLEDOT       reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    RB              reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kELSE           reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    RP              reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    COMMA           reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kTO             reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    kDOWNTO         reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2687:    COLON           reduce using rule 13 (const_value -> CHAR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 77
   yacc.py:2563:
   yacc.py:2565:    (14) const_value -> STRING .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    MUL             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kDIV            reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    DIV             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kMOD            reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kAND            reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    ADD             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    SUBTRACT        reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kOR             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kTHEN           reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    GE              reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    GT              reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    LE              reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    LT              reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    EQUAL           reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    UNEQUAL         reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kDO             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kOF             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    DOUBLEDOT       reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    RB              reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kELSE           reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    RP              reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    COMMA           reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kTO             reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    kDOWNTO         reduce using rule 14 (const_value -> STRING .)
   yacc.py:2687:    COLON           reduce using rule 14 (const_value -> STRING .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 78
   yacc.py:2563:
   yacc.py:2565:    (15) const_value -> SYS_CON .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    MUL             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kDIV            reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    DIV             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kMOD            reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kAND            reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    ADD             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    SUBTRACT        reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kOR             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kTHEN           reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    GE              reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    GT              reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    LE              reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    LT              reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    EQUAL           reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    UNEQUAL         reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kDO             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kOF             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    DOUBLEDOT       reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    RB              reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kELSE           reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    RP              reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    COMMA           reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kTO             reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    kDOWNTO         reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2687:    COLON           reduce using rule 15 (const_value -> SYS_CON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 79
   yacc.py:2563:
   yacc.py:2565:    (67) stmt_list -> stmt_list stmt SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    error           reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    INTEGER         reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    ID              reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    SYS_PROC        reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kREAD           reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kIF             reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kREPEAT         reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kWHILE          reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kFOR            reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kCASE           reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kGOTO           reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2687:    kUNTIL          reduce using rule 67 (stmt_list -> stmt_list stmt SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 80
   yacc.py:2563:
   yacc.py:2565:    (69) stmt_list -> stmt_list error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    error           reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    INTEGER         reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    ID              reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    SYS_PROC        reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kREAD           reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kIF             reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kREPEAT         reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kWHILE          reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kFOR            reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kCASE           reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kGOTO           reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2687:    kUNTIL          reduce using rule 69 (stmt_list -> stmt_list error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 81
   yacc.py:2563:
   yacc.py:2565:    (70) stmt -> INTEGER COLON . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    non_label_stmt                 shift and go to state 125
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 82
   yacc.py:2563:
   yacc.py:2565:    (81) assign_stmt -> ID LB . expression RB ASSIGN expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 126
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 83
   yacc.py:2563:
   yacc.py:2565:    (83) assign_stmt -> ID ASSIGN . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 127
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 84
   yacc.py:2563:
   yacc.py:2565:    (82) assign_stmt -> ID DOT . ID ASSIGN expression
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 128
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 85
   yacc.py:2563:
   yacc.py:2565:    (85) proc_stmt -> ID LP . args_list RP
   yacc.py:2565:    (133) args_list -> . args_list COMMA expression
   yacc.py:2565:    (134) args_list -> . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    args_list                      shift and go to state 129
   yacc.py:2714:    expression                     shift and go to state 130
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 86
   yacc.py:2563:
   yacc.py:2565:    (87) proc_stmt -> SYS_PROC LP . expression_list RP
   yacc.py:2565:    (104) expression_list -> . expression_list COMMA expression
   yacc.py:2565:    (105) expression_list -> . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression_list                shift and go to state 131
   yacc.py:2714:    expression                     shift and go to state 132
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 87
   yacc.py:2563:
   yacc.py:2565:    (88) proc_stmt -> kREAD LP . factor RP
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 133
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 88
   yacc.py:2563:
   yacc.py:2565:    (89) if_stmt -> kIF expression . kTHEN stmt else_clause
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    kTHEN           shift and go to state 134
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 89
   yacc.py:2563:
   yacc.py:2565:    (112) expression -> expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    GE              reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    GT              reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    LE              reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    LT              reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    EQUAL           reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    kDO             reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    kOF             reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    RB              reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    SEMICON         reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    kELSE           reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    RP              reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    COMMA           reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    kTO             reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 112 (expression -> expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 90
   yacc.py:2563:
   yacc.py:2565:    (116) expr -> term .
   yacc.py:2565:    (117) term -> term . MUL factor
   yacc.py:2565:    (118) term -> term . kDIV factor
   yacc.py:2565:    (119) term -> term . DIV factor
   yacc.py:2565:    (120) term -> term . kMOD factor
   yacc.py:2565:    (121) term -> term . kAND factor
   yacc.py:2566:
   yacc.py:2687:    ADD             reduce using rule 116 (expr -> term .)
   yacc.py:2687:    SUBTRACT        reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kOR             reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kTHEN           reduce using rule 116 (expr -> term .)
   yacc.py:2687:    GE              reduce using rule 116 (expr -> term .)
   yacc.py:2687:    GT              reduce using rule 116 (expr -> term .)
   yacc.py:2687:    LE              reduce using rule 116 (expr -> term .)
   yacc.py:2687:    LT              reduce using rule 116 (expr -> term .)
   yacc.py:2687:    EQUAL           reduce using rule 116 (expr -> term .)
   yacc.py:2687:    UNEQUAL         reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kDO             reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kOF             reduce using rule 116 (expr -> term .)
   yacc.py:2687:    RB              reduce using rule 116 (expr -> term .)
   yacc.py:2687:    SEMICON         reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kELSE           reduce using rule 116 (expr -> term .)
   yacc.py:2687:    RP              reduce using rule 116 (expr -> term .)
   yacc.py:2687:    COMMA           reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kTO             reduce using rule 116 (expr -> term .)
   yacc.py:2687:    kDOWNTO         reduce using rule 116 (expr -> term .)
   yacc.py:2687:    MUL             shift and go to state 144
   yacc.py:2687:    kDIV            shift and go to state 145
   yacc.py:2687:    DIV             shift and go to state 146
   yacc.py:2687:    kMOD            shift and go to state 147
   yacc.py:2687:    kAND            shift and go to state 148
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 91
   yacc.py:2563:
   yacc.py:2565:    (130) factor -> SUBTRACT . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 149
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 92
   yacc.py:2563:
   yacc.py:2565:    (122) term -> factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kDIV            reduce using rule 122 (term -> factor .)
   yacc.py:2687:    DIV             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kMOD            reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kAND            reduce using rule 122 (term -> factor .)
   yacc.py:2687:    ADD             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kOR             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kTHEN           reduce using rule 122 (term -> factor .)
   yacc.py:2687:    GE              reduce using rule 122 (term -> factor .)
   yacc.py:2687:    GT              reduce using rule 122 (term -> factor .)
   yacc.py:2687:    LE              reduce using rule 122 (term -> factor .)
   yacc.py:2687:    LT              reduce using rule 122 (term -> factor .)
   yacc.py:2687:    EQUAL           reduce using rule 122 (term -> factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kDO             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kOF             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    RB              reduce using rule 122 (term -> factor .)
   yacc.py:2687:    SEMICON         reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kELSE           reduce using rule 122 (term -> factor .)
   yacc.py:2687:    RP              reduce using rule 122 (term -> factor .)
   yacc.py:2687:    COMMA           reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kTO             reduce using rule 122 (term -> factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 122 (term -> factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 93
   yacc.py:2563:
   yacc.py:2565:    (123) factor -> SYS_FUNCT .
   yacc.py:2565:    (125) factor -> SYS_FUNCT . LP args_list RP
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kDIV            reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    DIV             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kMOD            reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kAND            reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    ADD             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    SUBTRACT        reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kOR             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kTHEN           reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    GE              reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    GT              reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    LE              reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    LT              reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    EQUAL           reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    UNEQUAL         reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kDO             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kOF             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    RB              reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    SEMICON         reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kELSE           reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    RP              reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    COMMA           reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kTO             reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    kDOWNTO         reduce using rule 123 (factor -> SYS_FUNCT .)
   yacc.py:2687:    LP              shift and go to state 150
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 94
   yacc.py:2563:
   yacc.py:2565:    (124) factor -> ID . LP args_list RP
   yacc.py:2565:    (126) factor -> ID . LB expression RB
   yacc.py:2565:    (127) factor -> ID .
   yacc.py:2565:    (132) factor -> ID . DOT ID
   yacc.py:2566:
   yacc.py:2687:    LP              shift and go to state 151
   yacc.py:2687:    LB              shift and go to state 152
   yacc.py:2687:    MUL             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kDIV            reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    DIV             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kMOD            reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kAND            reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    ADD             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    SUBTRACT        reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kOR             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kTHEN           reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    GE              reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    GT              reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    LE              reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    LT              reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    EQUAL           reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    UNEQUAL         reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kDO             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kOF             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    RB              reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    SEMICON         reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kELSE           reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    RP              reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    COMMA           reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kTO             reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    kDOWNTO         reduce using rule 127 (factor -> ID .)
   yacc.py:2687:    DOT             shift and go to state 153
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 95
   yacc.py:2563:
   yacc.py:2565:    (131) factor -> LP . expression RP
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 154
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 96
   yacc.py:2563:
   yacc.py:2565:    (128) factor -> const_value .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kDIV            reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    DIV             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kMOD            reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kAND            reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    ADD             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    SUBTRACT        reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kOR             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kTHEN           reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    GE              reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    GT              reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    LE              reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    LT              reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    EQUAL           reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    UNEQUAL         reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kDO             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kOF             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    RB              reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    SEMICON         reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kELSE           reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    RP              reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    COMMA           reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kTO             reduce using rule 128 (factor -> const_value .)
   yacc.py:2687:    kDOWNTO         reduce using rule 128 (factor -> const_value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 97
   yacc.py:2563:
   yacc.py:2565:    (129) factor -> kNOT . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 155
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 98
   yacc.py:2563:
   yacc.py:2565:    (92) repeat_stmt -> kREPEAT stmt_list . kUNTIL expression
   yacc.py:2565:    (67) stmt_list -> stmt_list . stmt SEMICON
   yacc.py:2565:    (69) stmt_list -> stmt_list . error SEMICON
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    kUNTIL          shift and go to state 156
   yacc.py:2687:    error           shift and go to state 36
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 35
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 99
   yacc.py:2563:
   yacc.py:2565:    (93) while_stmt -> kWHILE expression . kDO stmt
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    kDO             shift and go to state 157
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 100
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID . ASSIGN expression direction expression kDO stmt
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 158
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 101
   yacc.py:2563:
   yacc.py:2565:    (97) case_stmt -> kCASE expression . kOF case_expr_list kEND
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    kOF             shift and go to state 159
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 102
   yacc.py:2563:
   yacc.py:2565:    (103) goto_stmt -> kGOTO INTEGER .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 103 (goto_stmt -> kGOTO INTEGER .)
   yacc.py:2687:    kELSE           reduce using rule 103 (goto_stmt -> kGOTO INTEGER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 103
   yacc.py:2563:
   yacc.py:2565:    (44) routine_part -> routine_part function_decl .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 44 (routine_part -> routine_part function_decl .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 44 (routine_part -> routine_part function_decl .)
   yacc.py:2687:    kBEGIN          reduce using rule 44 (routine_part -> routine_part function_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 104
   yacc.py:2563:
   yacc.py:2565:    (45) routine_part -> routine_part procedure_decl .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 45 (routine_part -> routine_part procedure_decl .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 45 (routine_part -> routine_part procedure_decl .)
   yacc.py:2687:    kBEGIN          reduce using rule 45 (routine_part -> routine_part procedure_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 105
   yacc.py:2563:
   yacc.py:2565:    (50) function_decl -> function_head SEMICON . sub_routine SEMICON
   yacc.py:2565:    (51) function_decl -> function_head SEMICON . error SEMICON
   yacc.py:2565:    (49) sub_routine -> . routine
   yacc.py:2565:    (3) routine -> . routine_head routine_body
   yacc.py:2565:    (4) routine_head -> . const_part type_part var_part routine_part
   yacc.py:2565:    (5) const_part -> . kCONST const_expr_list
   yacc.py:2565:    (6) const_part -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    error           shift and go to state 161
   yacc.py:2687:    kCONST          shift and go to state 7
   yacc.py:2687:    kTYPE           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kVAR            reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFUNCTION       reduce using rule 135 (empty -> .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    sub_routine                    shift and go to state 160
   yacc.py:2714:    routine                        shift and go to state 162
   yacc.py:2714:    routine_head                   shift and go to state 5
   yacc.py:2714:    const_part                     shift and go to state 6
   yacc.py:2714:    empty                          shift and go to state 8
   yacc.py:2561:
   yacc.py:2562:state 106
   yacc.py:2563:
   yacc.py:2565:    (53) procedure_decl -> procedure_head SEMICON . sub_routine SEMICON
   yacc.py:2565:    (54) procedure_decl -> procedure_head SEMICON . error SEMICON
   yacc.py:2565:    (49) sub_routine -> . routine
   yacc.py:2565:    (3) routine -> . routine_head routine_body
   yacc.py:2565:    (4) routine_head -> . const_part type_part var_part routine_part
   yacc.py:2565:    (5) const_part -> . kCONST const_expr_list
   yacc.py:2565:    (6) const_part -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    error           shift and go to state 164
   yacc.py:2687:    kCONST          shift and go to state 7
   yacc.py:2687:    kTYPE           reduce using rule 135 (empty -> .)
   yacc.py:2687:    kVAR            reduce using rule 135 (empty -> .)
   yacc.py:2687:    kFUNCTION       reduce using rule 135 (empty -> .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 135 (empty -> .)
   yacc.py:2687:    kBEGIN          reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    sub_routine                    shift and go to state 163
   yacc.py:2714:    routine                        shift and go to state 162
   yacc.py:2714:    routine_head                   shift and go to state 5
   yacc.py:2714:    const_part                     shift and go to state 6
   yacc.py:2714:    empty                          shift and go to state 8
   yacc.py:2561:
   yacc.py:2562:state 107
   yacc.py:2563:
   yacc.py:2565:    (52) function_head -> kFUNCTION ID . parameters COLON simple_type_decl
   yacc.py:2565:    (56) parameters -> . LP para_decl_list RP
   yacc.py:2565:    (57) parameters -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    LP              shift and go to state 166
   yacc.py:2687:    COLON           reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    parameters                     shift and go to state 165
   yacc.py:2714:    empty                          shift and go to state 167
   yacc.py:2561:
   yacc.py:2562:state 108
   yacc.py:2563:
   yacc.py:2565:    (55) procedure_head -> kPROCEDURE ID . parameters
   yacc.py:2565:    (56) parameters -> . LP para_decl_list RP
   yacc.py:2565:    (57) parameters -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2687:    LP              shift and go to state 166
   yacc.py:2687:    SEMICON         reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    parameters                     shift and go to state 168
   yacc.py:2714:    empty                          shift and go to state 167
   yacc.py:2561:
   yacc.py:2562:state 109
   yacc.py:2563:
   yacc.py:2565:    (40) var_decl_list -> var_decl_list var_decl .
   yacc.py:2566:
   yacc.py:2687:    error           reduce using rule 40 (var_decl_list -> var_decl_list var_decl .)
   yacc.py:2687:    ID              reduce using rule 40 (var_decl_list -> var_decl_list var_decl .)
   yacc.py:2687:    kFUNCTION       reduce using rule 40 (var_decl_list -> var_decl_list var_decl .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 40 (var_decl_list -> var_decl_list var_decl .)
   yacc.py:2687:    kBEGIN          reduce using rule 40 (var_decl_list -> var_decl_list var_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 110
   yacc.py:2563:
   yacc.py:2565:    (42) var_decl -> name_list COLON . type_decl SEMICON
   yacc.py:2565:    (22) type_decl -> . simple_type_decl
   yacc.py:2565:    (23) type_decl -> . array_type_decl
   yacc.py:2565:    (24) type_decl -> . record_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (29) array_type_decl -> . kARRAY LB simple_type_decl RB kOF type_decl
   yacc.py:2565:    (30) record_type_decl -> . kRECORD field_decl_list kEND
   yacc.py:2565:    (31) record_type_decl -> . kRECORD error kEND
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    kARRAY          shift and go to state 122
   yacc.py:2687:    kRECORD         shift and go to state 123
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    type_decl                      shift and go to state 169
   yacc.py:2714:    simple_type_decl               shift and go to state 116
   yacc.py:2714:    array_type_decl                shift and go to state 117
   yacc.py:2714:    record_type_decl               shift and go to state 118
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 111
   yacc.py:2563:
   yacc.py:2565:    (36) name_list -> name_list COMMA . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 170
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 112
   yacc.py:2563:
   yacc.py:2565:    (43) var_decl -> error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    error           reduce using rule 43 (var_decl -> error SEMICON .)
   yacc.py:2687:    ID              reduce using rule 43 (var_decl -> error SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 43 (var_decl -> error SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 43 (var_decl -> error SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 43 (var_decl -> error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 113
   yacc.py:2563:
   yacc.py:2565:    (28) simple_type_decl -> ID .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 28 (simple_type_decl -> ID .)
   yacc.py:2687:    RB              reduce using rule 28 (simple_type_decl -> ID .)
   yacc.py:2687:    RP              reduce using rule 28 (simple_type_decl -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 114
   yacc.py:2563:
   yacc.py:2565:    (20) type_definition -> ID EQUAL type_decl . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 171
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 115
   yacc.py:2563:
   yacc.py:2565:    (21) type_definition -> ID EQUAL error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 172
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 116
   yacc.py:2563:
   yacc.py:2565:    (22) type_decl -> simple_type_decl .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 22 (type_decl -> simple_type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 117
   yacc.py:2563:
   yacc.py:2565:    (23) type_decl -> array_type_decl .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 23 (type_decl -> array_type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 118
   yacc.py:2563:
   yacc.py:2565:    (24) type_decl -> record_type_decl .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 24 (type_decl -> record_type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 119
   yacc.py:2563:
   yacc.py:2565:    (25) simple_type_decl -> SYS_TYPE .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 25 (simple_type_decl -> SYS_TYPE .)
   yacc.py:2687:    RB              reduce using rule 25 (simple_type_decl -> SYS_TYPE .)
   yacc.py:2687:    RP              reduce using rule 25 (simple_type_decl -> SYS_TYPE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 120
   yacc.py:2563:
   yacc.py:2565:    (26) simple_type_decl -> LP . name_list RP
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    name_list                      shift and go to state 173
   yacc.py:2561:
   yacc.py:2562:state 121
   yacc.py:2563:
   yacc.py:2565:    (27) simple_type_decl -> const_value . DOUBLEDOT const_value
   yacc.py:2566:
   yacc.py:2687:    DOUBLEDOT       shift and go to state 174
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 122
   yacc.py:2563:
   yacc.py:2565:    (29) array_type_decl -> kARRAY . LB simple_type_decl RB kOF type_decl
   yacc.py:2566:
   yacc.py:2687:    LB              shift and go to state 175
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 123
   yacc.py:2563:
   yacc.py:2565:    (30) record_type_decl -> kRECORD . field_decl_list kEND
   yacc.py:2565:    (31) record_type_decl -> kRECORD . error kEND
   yacc.py:2565:    (32) field_decl_list -> . field_decl_list field_decl
   yacc.py:2565:    (33) field_decl_list -> . field_decl
   yacc.py:2565:    (34) field_decl -> . name_list COLON type_decl SEMICON
   yacc.py:2565:    (35) field_decl -> . error SEMICON
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    error           shift and go to state 177
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    field_decl_list                shift and go to state 176
   yacc.py:2714:    field_decl                     shift and go to state 178
   yacc.py:2714:    name_list                      shift and go to state 179
   yacc.py:2561:
   yacc.py:2562:state 124
   yacc.py:2563:
   yacc.py:2565:    (9) const_expr -> ID EQUAL const_value SEMICON .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2687:    error           reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2687:    kTYPE           reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2687:    kVAR            reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 9 (const_expr -> ID EQUAL const_value SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 125
   yacc.py:2563:
   yacc.py:2565:    (70) stmt -> INTEGER COLON non_label_stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 70 (stmt -> INTEGER COLON non_label_stmt .)
   yacc.py:2687:    kELSE           reduce using rule 70 (stmt -> INTEGER COLON non_label_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 126
   yacc.py:2563:
   yacc.py:2565:    (81) assign_stmt -> ID LB expression . RB ASSIGN expression
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RB              shift and go to state 180
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 127
   yacc.py:2563:
   yacc.py:2565:    (83) assign_stmt -> ID ASSIGN expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 83 (assign_stmt -> ID ASSIGN expression .)
   yacc.py:2687:    kELSE           reduce using rule 83 (assign_stmt -> ID ASSIGN expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 128
   yacc.py:2563:
   yacc.py:2565:    (82) assign_stmt -> ID DOT ID . ASSIGN expression
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 181
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 129
   yacc.py:2563:
   yacc.py:2565:    (85) proc_stmt -> ID LP args_list . RP
   yacc.py:2565:    (133) args_list -> args_list . COMMA expression
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 182
   yacc.py:2687:    COMMA           shift and go to state 183
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 130
   yacc.py:2563:
   yacc.py:2565:    (134) args_list -> expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 134 (args_list -> expression .)
   yacc.py:2687:    COMMA           reduce using rule 134 (args_list -> expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 131
   yacc.py:2563:
   yacc.py:2565:    (87) proc_stmt -> SYS_PROC LP expression_list . RP
   yacc.py:2565:    (104) expression_list -> expression_list . COMMA expression
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 184
   yacc.py:2687:    COMMA           shift and go to state 185
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 132
   yacc.py:2563:
   yacc.py:2565:    (105) expression_list -> expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 105 (expression_list -> expression .)
   yacc.py:2687:    COMMA           reduce using rule 105 (expression_list -> expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 133
   yacc.py:2563:
   yacc.py:2565:    (88) proc_stmt -> kREAD LP factor . RP
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 186
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 134
   yacc.py:2563:
   yacc.py:2565:    (89) if_stmt -> kIF expression kTHEN . stmt else_clause
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 187
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 135
   yacc.py:2563:
   yacc.py:2565:    (106) expression -> expression GE . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expr                           shift and go to state 188
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 136
   yacc.py:2563:
   yacc.py:2565:    (107) expression -> expression GT . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expr                           shift and go to state 189
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 137
   yacc.py:2563:
   yacc.py:2565:    (108) expression -> expression LE . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expr                           shift and go to state 190
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 138
   yacc.py:2563:
   yacc.py:2565:    (109) expression -> expression LT . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expr                           shift and go to state 191
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 139
   yacc.py:2563:
   yacc.py:2565:    (110) expression -> expression EQUAL . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expr                           shift and go to state 192
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 140
   yacc.py:2563:
   yacc.py:2565:    (111) expression -> expression UNEQUAL . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expr                           shift and go to state 193
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 141
   yacc.py:2563:
   yacc.py:2565:    (113) expr -> expr ADD . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    term                           shift and go to state 194
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 142
   yacc.py:2563:
   yacc.py:2565:    (114) expr -> expr SUBTRACT . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    term                           shift and go to state 195
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 143
   yacc.py:2563:
   yacc.py:2565:    (115) expr -> expr kOR . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    term                           shift and go to state 196
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 144
   yacc.py:2563:
   yacc.py:2565:    (117) term -> term MUL . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 197
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 145
   yacc.py:2563:
   yacc.py:2565:    (118) term -> term kDIV . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 198
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 146
   yacc.py:2563:
   yacc.py:2565:    (119) term -> term DIV . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 199
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 147
   yacc.py:2563:
   yacc.py:2565:    (120) term -> term kMOD . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 200
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 148
   yacc.py:2563:
   yacc.py:2565:    (121) term -> term kAND . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    factor                         shift and go to state 201
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 149
   yacc.py:2563:
   yacc.py:2565:    (130) factor -> SUBTRACT factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kDIV            reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    DIV             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kMOD            reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kAND            reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    ADD             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kOR             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kTHEN           reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    GE              reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    GT              reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    LE              reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    LT              reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    EQUAL           reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kDO             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kOF             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    RB              reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    SEMICON         reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kELSE           reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    RP              reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    COMMA           reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kTO             reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 130 (factor -> SUBTRACT factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 150
   yacc.py:2563:
   yacc.py:2565:    (125) factor -> SYS_FUNCT LP . args_list RP
   yacc.py:2565:    (133) args_list -> . args_list COMMA expression
   yacc.py:2565:    (134) args_list -> . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    args_list                      shift and go to state 202
   yacc.py:2714:    expression                     shift and go to state 130
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 151
   yacc.py:2563:
   yacc.py:2565:    (124) factor -> ID LP . args_list RP
   yacc.py:2565:    (133) args_list -> . args_list COMMA expression
   yacc.py:2565:    (134) args_list -> . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    args_list                      shift and go to state 203
   yacc.py:2714:    expression                     shift and go to state 130
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 152
   yacc.py:2563:
   yacc.py:2565:    (126) factor -> ID LB . expression RB
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 204
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 153
   yacc.py:2563:
   yacc.py:2565:    (132) factor -> ID DOT . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 205
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 154
   yacc.py:2563:
   yacc.py:2565:    (131) factor -> LP expression . RP
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 206
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 155
   yacc.py:2563:
   yacc.py:2565:    (129) factor -> kNOT factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kDIV            reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    DIV             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kMOD            reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kAND            reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    ADD             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kOR             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kTHEN           reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    GE              reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    GT              reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    LE              reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    LT              reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    EQUAL           reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kDO             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kOF             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    RB              reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    SEMICON         reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kELSE           reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    RP              reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    COMMA           reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kTO             reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 129 (factor -> kNOT factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 156
   yacc.py:2563:
   yacc.py:2565:    (92) repeat_stmt -> kREPEAT stmt_list kUNTIL . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 207
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 157
   yacc.py:2563:
   yacc.py:2565:    (93) while_stmt -> kWHILE expression kDO . stmt
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 208
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 158
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID ASSIGN . expression direction expression kDO stmt
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 209
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 159
   yacc.py:2563:
   yacc.py:2565:    (97) case_stmt -> kCASE expression kOF . case_expr_list kEND
   yacc.py:2565:    (98) case_expr_list -> . case_expr_list case_expr
   yacc.py:2565:    (99) case_expr_list -> . case_expr
   yacc.py:2565:    (100) case_expr -> . const_value COLON stmt SEMICON
   yacc.py:2565:    (101) case_expr -> . ID COLON stmt SEMICON
   yacc.py:2565:    (102) case_expr -> . kELSE COLON stmt SEMICON
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 213
   yacc.py:2687:    kELSE           shift and go to state 214
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    case_expr_list                 shift and go to state 210
   yacc.py:2714:    case_expr                      shift and go to state 211
   yacc.py:2714:    const_value                    shift and go to state 212
   yacc.py:2561:
   yacc.py:2562:state 160
   yacc.py:2563:
   yacc.py:2565:    (50) function_decl -> function_head SEMICON sub_routine . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 215
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 161
   yacc.py:2563:
   yacc.py:2565:    (51) function_decl -> function_head SEMICON error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 216
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 162
   yacc.py:2563:
   yacc.py:2565:    (49) sub_routine -> routine .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 49 (sub_routine -> routine .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 163
   yacc.py:2563:
   yacc.py:2565:    (53) procedure_decl -> procedure_head SEMICON sub_routine . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 217
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 164
   yacc.py:2563:
   yacc.py:2565:    (54) procedure_decl -> procedure_head SEMICON error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 218
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 165
   yacc.py:2563:
   yacc.py:2565:    (52) function_head -> kFUNCTION ID parameters . COLON simple_type_decl
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 219
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 166
   yacc.py:2563:
   yacc.py:2565:    (56) parameters -> LP . para_decl_list RP
   yacc.py:2565:    (58) para_decl_list -> . para_decl_list SEMICON para_type_list
   yacc.py:2565:    (59) para_decl_list -> . para_type_list
   yacc.py:2565:    (60) para_type_list -> . var_para_list COLON simple_type_decl
   yacc.py:2565:    (61) para_type_list -> . val_para_list COLON simple_type_decl
   yacc.py:2565:    (62) var_para_list -> . kVAR name_list
   yacc.py:2565:    (63) val_para_list -> . name_list
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    kVAR            shift and go to state 224
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    para_decl_list                 shift and go to state 220
   yacc.py:2714:    para_type_list                 shift and go to state 221
   yacc.py:2714:    var_para_list                  shift and go to state 222
   yacc.py:2714:    val_para_list                  shift and go to state 223
   yacc.py:2714:    name_list                      shift and go to state 225
   yacc.py:2561:
   yacc.py:2562:state 167
   yacc.py:2563:
   yacc.py:2565:    (57) parameters -> empty .
   yacc.py:2566:
   yacc.py:2687:    COLON           reduce using rule 57 (parameters -> empty .)
   yacc.py:2687:    SEMICON         reduce using rule 57 (parameters -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 168
   yacc.py:2563:
   yacc.py:2565:    (55) procedure_head -> kPROCEDURE ID parameters .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 55 (procedure_head -> kPROCEDURE ID parameters .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 169
   yacc.py:2563:
   yacc.py:2565:    (42) var_decl -> name_list COLON type_decl . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 226
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 170
   yacc.py:2563:
   yacc.py:2565:    (36) name_list -> name_list COMMA ID .
   yacc.py:2566:
   yacc.py:2687:    COLON           reduce using rule 36 (name_list -> name_list COMMA ID .)
   yacc.py:2687:    COMMA           reduce using rule 36 (name_list -> name_list COMMA ID .)
   yacc.py:2687:    RP              reduce using rule 36 (name_list -> name_list COMMA ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 171
   yacc.py:2563:
   yacc.py:2565:    (20) type_definition -> ID EQUAL type_decl SEMICON .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 20 (type_definition -> ID EQUAL type_decl SEMICON .)
   yacc.py:2687:    kVAR            reduce using rule 20 (type_definition -> ID EQUAL type_decl SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 20 (type_definition -> ID EQUAL type_decl SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 20 (type_definition -> ID EQUAL type_decl SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 20 (type_definition -> ID EQUAL type_decl SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 172
   yacc.py:2563:
   yacc.py:2565:    (21) type_definition -> ID EQUAL error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 21 (type_definition -> ID EQUAL error SEMICON .)
   yacc.py:2687:    kVAR            reduce using rule 21 (type_definition -> ID EQUAL error SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 21 (type_definition -> ID EQUAL error SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 21 (type_definition -> ID EQUAL error SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 21 (type_definition -> ID EQUAL error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 173
   yacc.py:2563:
   yacc.py:2565:    (26) simple_type_decl -> LP name_list . RP
   yacc.py:2565:    (36) name_list -> name_list . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 227
   yacc.py:2687:    COMMA           shift and go to state 111
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 174
   yacc.py:2563:
   yacc.py:2565:    (27) simple_type_decl -> const_value DOUBLEDOT . const_value
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    const_value                    shift and go to state 228
   yacc.py:2561:
   yacc.py:2562:state 175
   yacc.py:2563:
   yacc.py:2565:    (29) array_type_decl -> kARRAY LB . simple_type_decl RB kOF type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    simple_type_decl               shift and go to state 229
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 176
   yacc.py:2563:
   yacc.py:2565:    (30) record_type_decl -> kRECORD field_decl_list . kEND
   yacc.py:2565:    (32) field_decl_list -> field_decl_list . field_decl
   yacc.py:2565:    (34) field_decl -> . name_list COLON type_decl SEMICON
   yacc.py:2565:    (35) field_decl -> . error SEMICON
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    kEND            shift and go to state 230
   yacc.py:2687:    error           shift and go to state 232
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    field_decl                     shift and go to state 231
   yacc.py:2714:    name_list                      shift and go to state 179
   yacc.py:2561:
   yacc.py:2562:state 177
   yacc.py:2563:
   yacc.py:2565:    (31) record_type_decl -> kRECORD error . kEND
   yacc.py:2565:    (35) field_decl -> error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    kEND            shift and go to state 233
   yacc.py:2687:    SEMICON         shift and go to state 234
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 178
   yacc.py:2563:
   yacc.py:2565:    (33) field_decl_list -> field_decl .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 33 (field_decl_list -> field_decl .)
   yacc.py:2687:    error           reduce using rule 33 (field_decl_list -> field_decl .)
   yacc.py:2687:    ID              reduce using rule 33 (field_decl_list -> field_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 179
   yacc.py:2563:
   yacc.py:2565:    (34) field_decl -> name_list . COLON type_decl SEMICON
   yacc.py:2565:    (36) name_list -> name_list . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 235
   yacc.py:2687:    COMMA           shift and go to state 111
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 180
   yacc.py:2563:
   yacc.py:2565:    (81) assign_stmt -> ID LB expression RB . ASSIGN expression
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 236
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 181
   yacc.py:2563:
   yacc.py:2565:    (82) assign_stmt -> ID DOT ID ASSIGN . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 237
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 182
   yacc.py:2563:
   yacc.py:2565:    (85) proc_stmt -> ID LP args_list RP .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 85 (proc_stmt -> ID LP args_list RP .)
   yacc.py:2687:    kELSE           reduce using rule 85 (proc_stmt -> ID LP args_list RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 183
   yacc.py:2563:
   yacc.py:2565:    (133) args_list -> args_list COMMA . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 238
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 184
   yacc.py:2563:
   yacc.py:2565:    (87) proc_stmt -> SYS_PROC LP expression_list RP .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 87 (proc_stmt -> SYS_PROC LP expression_list RP .)
   yacc.py:2687:    kELSE           reduce using rule 87 (proc_stmt -> SYS_PROC LP expression_list RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 185
   yacc.py:2563:
   yacc.py:2565:    (104) expression_list -> expression_list COMMA . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 239
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 186
   yacc.py:2563:
   yacc.py:2565:    (88) proc_stmt -> kREAD LP factor RP .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 88 (proc_stmt -> kREAD LP factor RP .)
   yacc.py:2687:    kELSE           reduce using rule 88 (proc_stmt -> kREAD LP factor RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 187
   yacc.py:2563:
   yacc.py:2565:    (89) if_stmt -> kIF expression kTHEN stmt . else_clause
   yacc.py:2565:    (90) else_clause -> . kELSE stmt
   yacc.py:2565:    (91) else_clause -> . empty
   yacc.py:2565:    (135) empty -> .
   yacc.py:2566:
   yacc.py:2609:  ! shift/reduce conflict for kELSE resolved as shift
   yacc.py:2687:    kELSE           shift and go to state 241
   yacc.py:2687:    SEMICON         reduce using rule 135 (empty -> .)
   yacc.py:2689:
   yacc.py:2696:  ! kELSE           [ reduce using rule 135 (empty -> .) ]
   yacc.py:2700:
   yacc.py:2714:    else_clause                    shift and go to state 240
   yacc.py:2714:    empty                          shift and go to state 242
   yacc.py:2561:
   yacc.py:2562:state 188
   yacc.py:2563:
   yacc.py:2565:    (106) expression -> expression GE expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    GE              reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    GT              reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    LE              reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    LT              reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    EQUAL           reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    kDO             reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    kOF             reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    RB              reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    SEMICON         reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    kELSE           reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    RP              reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    COMMA           reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    kTO             reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 106 (expression -> expression GE expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 189
   yacc.py:2563:
   yacc.py:2565:    (107) expression -> expression GT expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    GE              reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    GT              reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    LE              reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    LT              reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    EQUAL           reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    kDO             reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    kOF             reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    RB              reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    SEMICON         reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    kELSE           reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    RP              reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    COMMA           reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    kTO             reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 107 (expression -> expression GT expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 190
   yacc.py:2563:
   yacc.py:2565:    (108) expression -> expression LE expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    GE              reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    GT              reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    LE              reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    LT              reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    EQUAL           reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    kDO             reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    kOF             reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    RB              reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    SEMICON         reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    kELSE           reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    RP              reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    COMMA           reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    kTO             reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 108 (expression -> expression LE expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 191
   yacc.py:2563:
   yacc.py:2565:    (109) expression -> expression LT expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    GE              reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    GT              reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    LE              reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    LT              reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    EQUAL           reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    kDO             reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    kOF             reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    RB              reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    SEMICON         reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    kELSE           reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    RP              reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    COMMA           reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    kTO             reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 109 (expression -> expression LT expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 192
   yacc.py:2563:
   yacc.py:2565:    (110) expression -> expression EQUAL expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    GE              reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    GT              reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    LE              reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    LT              reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    EQUAL           reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    kDO             reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    kOF             reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    RB              reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    SEMICON         reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    kELSE           reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    RP              reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    COMMA           reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    kTO             reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 110 (expression -> expression EQUAL expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 193
   yacc.py:2563:
   yacc.py:2565:    (111) expression -> expression UNEQUAL expr .
   yacc.py:2565:    (113) expr -> expr . ADD term
   yacc.py:2565:    (114) expr -> expr . SUBTRACT term
   yacc.py:2565:    (115) expr -> expr . kOR term
   yacc.py:2566:
   yacc.py:2687:    kTHEN           reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    GE              reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    GT              reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    LE              reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    LT              reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    EQUAL           reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    UNEQUAL         reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    kDO             reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    kOF             reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    RB              reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    SEMICON         reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    kELSE           reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    RP              reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    COMMA           reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    kTO             reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    kDOWNTO         reduce using rule 111 (expression -> expression UNEQUAL expr .)
   yacc.py:2687:    ADD             shift and go to state 141
   yacc.py:2687:    SUBTRACT        shift and go to state 142
   yacc.py:2687:    kOR             shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 194
   yacc.py:2563:
   yacc.py:2565:    (113) expr -> expr ADD term .
   yacc.py:2565:    (117) term -> term . MUL factor
   yacc.py:2565:    (118) term -> term . kDIV factor
   yacc.py:2565:    (119) term -> term . DIV factor
   yacc.py:2565:    (120) term -> term . kMOD factor
   yacc.py:2565:    (121) term -> term . kAND factor
   yacc.py:2566:
   yacc.py:2687:    ADD             reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    SUBTRACT        reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kOR             reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kTHEN           reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    GE              reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    GT              reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    LE              reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    LT              reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    EQUAL           reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    UNEQUAL         reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kDO             reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kOF             reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    RB              reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    SEMICON         reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kELSE           reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    RP              reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    COMMA           reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kTO             reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    kDOWNTO         reduce using rule 113 (expr -> expr ADD term .)
   yacc.py:2687:    MUL             shift and go to state 144
   yacc.py:2687:    kDIV            shift and go to state 145
   yacc.py:2687:    DIV             shift and go to state 146
   yacc.py:2687:    kMOD            shift and go to state 147
   yacc.py:2687:    kAND            shift and go to state 148
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 195
   yacc.py:2563:
   yacc.py:2565:    (114) expr -> expr SUBTRACT term .
   yacc.py:2565:    (117) term -> term . MUL factor
   yacc.py:2565:    (118) term -> term . kDIV factor
   yacc.py:2565:    (119) term -> term . DIV factor
   yacc.py:2565:    (120) term -> term . kMOD factor
   yacc.py:2565:    (121) term -> term . kAND factor
   yacc.py:2566:
   yacc.py:2687:    ADD             reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    SUBTRACT        reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kOR             reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kTHEN           reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    GE              reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    GT              reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    LE              reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    LT              reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    EQUAL           reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    UNEQUAL         reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kDO             reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kOF             reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    RB              reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    SEMICON         reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kELSE           reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    RP              reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    COMMA           reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kTO             reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    kDOWNTO         reduce using rule 114 (expr -> expr SUBTRACT term .)
   yacc.py:2687:    MUL             shift and go to state 144
   yacc.py:2687:    kDIV            shift and go to state 145
   yacc.py:2687:    DIV             shift and go to state 146
   yacc.py:2687:    kMOD            shift and go to state 147
   yacc.py:2687:    kAND            shift and go to state 148
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 196
   yacc.py:2563:
   yacc.py:2565:    (115) expr -> expr kOR term .
   yacc.py:2565:    (117) term -> term . MUL factor
   yacc.py:2565:    (118) term -> term . kDIV factor
   yacc.py:2565:    (119) term -> term . DIV factor
   yacc.py:2565:    (120) term -> term . kMOD factor
   yacc.py:2565:    (121) term -> term . kAND factor
   yacc.py:2566:
   yacc.py:2687:    ADD             reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    SUBTRACT        reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kOR             reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kTHEN           reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    GE              reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    GT              reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    LE              reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    LT              reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    EQUAL           reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    UNEQUAL         reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kDO             reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kOF             reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    RB              reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    SEMICON         reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kELSE           reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    RP              reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    COMMA           reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kTO             reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    kDOWNTO         reduce using rule 115 (expr -> expr kOR term .)
   yacc.py:2687:    MUL             shift and go to state 144
   yacc.py:2687:    kDIV            shift and go to state 145
   yacc.py:2687:    DIV             shift and go to state 146
   yacc.py:2687:    kMOD            shift and go to state 147
   yacc.py:2687:    kAND            shift and go to state 148
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 197
   yacc.py:2563:
   yacc.py:2565:    (117) term -> term MUL factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kDIV            reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    DIV             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kMOD            reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kAND            reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    ADD             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kOR             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kTHEN           reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    GE              reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    GT              reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    LE              reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    LT              reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    EQUAL           reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kDO             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kOF             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    RB              reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    SEMICON         reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kELSE           reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    RP              reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    COMMA           reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kTO             reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 117 (term -> term MUL factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 198
   yacc.py:2563:
   yacc.py:2565:    (118) term -> term kDIV factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kDIV            reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    DIV             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kMOD            reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kAND            reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    ADD             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kOR             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kTHEN           reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    GE              reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    GT              reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    LE              reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    LT              reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    EQUAL           reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kDO             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kOF             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    RB              reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    SEMICON         reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kELSE           reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    RP              reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    COMMA           reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kTO             reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 118 (term -> term kDIV factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 199
   yacc.py:2563:
   yacc.py:2565:    (119) term -> term DIV factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kDIV            reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    DIV             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kMOD            reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kAND            reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    ADD             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kOR             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kTHEN           reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    GE              reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    GT              reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    LE              reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    LT              reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    EQUAL           reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kDO             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kOF             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    RB              reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    SEMICON         reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kELSE           reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    RP              reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    COMMA           reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kTO             reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 119 (term -> term DIV factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 200
   yacc.py:2563:
   yacc.py:2565:    (120) term -> term kMOD factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kDIV            reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    DIV             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kMOD            reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kAND            reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    ADD             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kOR             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kTHEN           reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    GE              reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    GT              reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    LE              reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    LT              reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    EQUAL           reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kDO             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kOF             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    RB              reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    SEMICON         reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kELSE           reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    RP              reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    COMMA           reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kTO             reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 120 (term -> term kMOD factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 201
   yacc.py:2563:
   yacc.py:2565:    (121) term -> term kAND factor .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kDIV            reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    DIV             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kMOD            reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kAND            reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    ADD             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    SUBTRACT        reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kOR             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kTHEN           reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    GE              reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    GT              reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    LE              reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    LT              reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    EQUAL           reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    UNEQUAL         reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kDO             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kOF             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    RB              reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    SEMICON         reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kELSE           reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    RP              reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    COMMA           reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kTO             reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2687:    kDOWNTO         reduce using rule 121 (term -> term kAND factor .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 202
   yacc.py:2563:
   yacc.py:2565:    (125) factor -> SYS_FUNCT LP args_list . RP
   yacc.py:2565:    (133) args_list -> args_list . COMMA expression
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 243
   yacc.py:2687:    COMMA           shift and go to state 183
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 203
   yacc.py:2563:
   yacc.py:2565:    (124) factor -> ID LP args_list . RP
   yacc.py:2565:    (133) args_list -> args_list . COMMA expression
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 244
   yacc.py:2687:    COMMA           shift and go to state 183
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 204
   yacc.py:2563:
   yacc.py:2565:    (126) factor -> ID LB expression . RB
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RB              shift and go to state 245
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 205
   yacc.py:2563:
   yacc.py:2565:    (132) factor -> ID DOT ID .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kDIV            reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    DIV             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kMOD            reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kAND            reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    ADD             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    SUBTRACT        reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kOR             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kTHEN           reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    GE              reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    GT              reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    LE              reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    LT              reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    EQUAL           reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    UNEQUAL         reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kDO             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kOF             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    RB              reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    SEMICON         reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kELSE           reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    RP              reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    COMMA           reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kTO             reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2687:    kDOWNTO         reduce using rule 132 (factor -> ID DOT ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 206
   yacc.py:2563:
   yacc.py:2565:    (131) factor -> LP expression RP .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kDIV            reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    DIV             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kMOD            reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kAND            reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    ADD             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    SUBTRACT        reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kOR             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kTHEN           reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    GE              reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    GT              reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    LE              reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    LT              reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    EQUAL           reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    UNEQUAL         reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kDO             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kOF             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    RB              reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    SEMICON         reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kELSE           reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    RP              reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    COMMA           reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kTO             reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2687:    kDOWNTO         reduce using rule 131 (factor -> LP expression RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 207
   yacc.py:2563:
   yacc.py:2565:    (92) repeat_stmt -> kREPEAT stmt_list kUNTIL expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 92 (repeat_stmt -> kREPEAT stmt_list kUNTIL expression .)
   yacc.py:2687:    kELSE           reduce using rule 92 (repeat_stmt -> kREPEAT stmt_list kUNTIL expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 208
   yacc.py:2563:
   yacc.py:2565:    (93) while_stmt -> kWHILE expression kDO stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 93 (while_stmt -> kWHILE expression kDO stmt .)
   yacc.py:2687:    kELSE           reduce using rule 93 (while_stmt -> kWHILE expression kDO stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 209
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID ASSIGN expression . direction expression kDO stmt
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2565:    (95) direction -> . kTO
   yacc.py:2565:    (96) direction -> . kDOWNTO
   yacc.py:2566:
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2687:    kTO             shift and go to state 247
   yacc.py:2687:    kDOWNTO         shift and go to state 248
   yacc.py:2689:
   yacc.py:2714:    direction                      shift and go to state 246
   yacc.py:2561:
   yacc.py:2562:state 210
   yacc.py:2563:
   yacc.py:2565:    (97) case_stmt -> kCASE expression kOF case_expr_list . kEND
   yacc.py:2565:    (98) case_expr_list -> case_expr_list . case_expr
   yacc.py:2565:    (100) case_expr -> . const_value COLON stmt SEMICON
   yacc.py:2565:    (101) case_expr -> . ID COLON stmt SEMICON
   yacc.py:2565:    (102) case_expr -> . kELSE COLON stmt SEMICON
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    kEND            shift and go to state 249
   yacc.py:2687:    ID              shift and go to state 213
   yacc.py:2687:    kELSE           shift and go to state 214
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    case_expr                      shift and go to state 250
   yacc.py:2714:    const_value                    shift and go to state 212
   yacc.py:2561:
   yacc.py:2562:state 211
   yacc.py:2563:
   yacc.py:2565:    (99) case_expr_list -> case_expr .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    ID              reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    kELSE           reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    INTEGER         reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    REAL            reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    CHAR            reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    STRING          reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2687:    SYS_CON         reduce using rule 99 (case_expr_list -> case_expr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 212
   yacc.py:2563:
   yacc.py:2565:    (100) case_expr -> const_value . COLON stmt SEMICON
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 251
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 213
   yacc.py:2563:
   yacc.py:2565:    (101) case_expr -> ID . COLON stmt SEMICON
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 252
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 214
   yacc.py:2563:
   yacc.py:2565:    (102) case_expr -> kELSE . COLON stmt SEMICON
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 253
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 215
   yacc.py:2563:
   yacc.py:2565:    (50) function_decl -> function_head SEMICON sub_routine SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 50 (function_decl -> function_head SEMICON sub_routine SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 50 (function_decl -> function_head SEMICON sub_routine SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 50 (function_decl -> function_head SEMICON sub_routine SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 216
   yacc.py:2563:
   yacc.py:2565:    (51) function_decl -> function_head SEMICON error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 51 (function_decl -> function_head SEMICON error SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 51 (function_decl -> function_head SEMICON error SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 51 (function_decl -> function_head SEMICON error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 217
   yacc.py:2563:
   yacc.py:2565:    (53) procedure_decl -> procedure_head SEMICON sub_routine SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 53 (procedure_decl -> procedure_head SEMICON sub_routine SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 53 (procedure_decl -> procedure_head SEMICON sub_routine SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 53 (procedure_decl -> procedure_head SEMICON sub_routine SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 218
   yacc.py:2563:
   yacc.py:2565:    (54) procedure_decl -> procedure_head SEMICON error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kFUNCTION       reduce using rule 54 (procedure_decl -> procedure_head SEMICON error SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 54 (procedure_decl -> procedure_head SEMICON error SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 54 (procedure_decl -> procedure_head SEMICON error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 219
   yacc.py:2563:
   yacc.py:2565:    (52) function_head -> kFUNCTION ID parameters COLON . simple_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    simple_type_decl               shift and go to state 254
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 220
   yacc.py:2563:
   yacc.py:2565:    (56) parameters -> LP para_decl_list . RP
   yacc.py:2565:    (58) para_decl_list -> para_decl_list . SEMICON para_type_list
   yacc.py:2566:
   yacc.py:2687:    RP              shift and go to state 255
   yacc.py:2687:    SEMICON         shift and go to state 256
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 221
   yacc.py:2563:
   yacc.py:2565:    (59) para_decl_list -> para_type_list .
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 59 (para_decl_list -> para_type_list .)
   yacc.py:2687:    SEMICON         reduce using rule 59 (para_decl_list -> para_type_list .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 222
   yacc.py:2563:
   yacc.py:2565:    (60) para_type_list -> var_para_list . COLON simple_type_decl
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 257
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 223
   yacc.py:2563:
   yacc.py:2565:    (61) para_type_list -> val_para_list . COLON simple_type_decl
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 258
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 224
   yacc.py:2563:
   yacc.py:2565:    (62) var_para_list -> kVAR . name_list
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    name_list                      shift and go to state 259
   yacc.py:2561:
   yacc.py:2562:state 225
   yacc.py:2563:
   yacc.py:2565:    (63) val_para_list -> name_list .
   yacc.py:2565:    (36) name_list -> name_list . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    COLON           reduce using rule 63 (val_para_list -> name_list .)
   yacc.py:2687:    COMMA           shift and go to state 111
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 226
   yacc.py:2563:
   yacc.py:2565:    (42) var_decl -> name_list COLON type_decl SEMICON .
   yacc.py:2566:
   yacc.py:2687:    error           reduce using rule 42 (var_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2687:    ID              reduce using rule 42 (var_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2687:    kFUNCTION       reduce using rule 42 (var_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2687:    kPROCEDURE      reduce using rule 42 (var_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2687:    kBEGIN          reduce using rule 42 (var_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 227
   yacc.py:2563:
   yacc.py:2565:    (26) simple_type_decl -> LP name_list RP .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 26 (simple_type_decl -> LP name_list RP .)
   yacc.py:2687:    RB              reduce using rule 26 (simple_type_decl -> LP name_list RP .)
   yacc.py:2687:    RP              reduce using rule 26 (simple_type_decl -> LP name_list RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 228
   yacc.py:2563:
   yacc.py:2565:    (27) simple_type_decl -> const_value DOUBLEDOT const_value .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 27 (simple_type_decl -> const_value DOUBLEDOT const_value .)
   yacc.py:2687:    RB              reduce using rule 27 (simple_type_decl -> const_value DOUBLEDOT const_value .)
   yacc.py:2687:    RP              reduce using rule 27 (simple_type_decl -> const_value DOUBLEDOT const_value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 229
   yacc.py:2563:
   yacc.py:2565:    (29) array_type_decl -> kARRAY LB simple_type_decl . RB kOF type_decl
   yacc.py:2566:
   yacc.py:2687:    RB              shift and go to state 260
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 230
   yacc.py:2563:
   yacc.py:2565:    (30) record_type_decl -> kRECORD field_decl_list kEND .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 30 (record_type_decl -> kRECORD field_decl_list kEND .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 231
   yacc.py:2563:
   yacc.py:2565:    (32) field_decl_list -> field_decl_list field_decl .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 32 (field_decl_list -> field_decl_list field_decl .)
   yacc.py:2687:    error           reduce using rule 32 (field_decl_list -> field_decl_list field_decl .)
   yacc.py:2687:    ID              reduce using rule 32 (field_decl_list -> field_decl_list field_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 232
   yacc.py:2563:
   yacc.py:2565:    (35) field_decl -> error . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 234
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 233
   yacc.py:2563:
   yacc.py:2565:    (31) record_type_decl -> kRECORD error kEND .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 31 (record_type_decl -> kRECORD error kEND .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 234
   yacc.py:2563:
   yacc.py:2565:    (35) field_decl -> error SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 35 (field_decl -> error SEMICON .)
   yacc.py:2687:    error           reduce using rule 35 (field_decl -> error SEMICON .)
   yacc.py:2687:    ID              reduce using rule 35 (field_decl -> error SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 235
   yacc.py:2563:
   yacc.py:2565:    (34) field_decl -> name_list COLON . type_decl SEMICON
   yacc.py:2565:    (22) type_decl -> . simple_type_decl
   yacc.py:2565:    (23) type_decl -> . array_type_decl
   yacc.py:2565:    (24) type_decl -> . record_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (29) array_type_decl -> . kARRAY LB simple_type_decl RB kOF type_decl
   yacc.py:2565:    (30) record_type_decl -> . kRECORD field_decl_list kEND
   yacc.py:2565:    (31) record_type_decl -> . kRECORD error kEND
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    kARRAY          shift and go to state 122
   yacc.py:2687:    kRECORD         shift and go to state 123
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    type_decl                      shift and go to state 261
   yacc.py:2714:    simple_type_decl               shift and go to state 116
   yacc.py:2714:    array_type_decl                shift and go to state 117
   yacc.py:2714:    record_type_decl               shift and go to state 118
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 236
   yacc.py:2563:
   yacc.py:2565:    (81) assign_stmt -> ID LB expression RB ASSIGN . expression
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 262
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 237
   yacc.py:2563:
   yacc.py:2565:    (82) assign_stmt -> ID DOT ID ASSIGN expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 82 (assign_stmt -> ID DOT ID ASSIGN expression .)
   yacc.py:2687:    kELSE           reduce using rule 82 (assign_stmt -> ID DOT ID ASSIGN expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 238
   yacc.py:2563:
   yacc.py:2565:    (133) args_list -> args_list COMMA expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 133 (args_list -> args_list COMMA expression .)
   yacc.py:2687:    COMMA           reduce using rule 133 (args_list -> args_list COMMA expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 239
   yacc.py:2563:
   yacc.py:2565:    (104) expression_list -> expression_list COMMA expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 104 (expression_list -> expression_list COMMA expression .)
   yacc.py:2687:    COMMA           reduce using rule 104 (expression_list -> expression_list COMMA expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 240
   yacc.py:2563:
   yacc.py:2565:    (89) if_stmt -> kIF expression kTHEN stmt else_clause .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 89 (if_stmt -> kIF expression kTHEN stmt else_clause .)
   yacc.py:2687:    kELSE           reduce using rule 89 (if_stmt -> kIF expression kTHEN stmt else_clause .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 241
   yacc.py:2563:
   yacc.py:2565:    (90) else_clause -> kELSE . stmt
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 263
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 242
   yacc.py:2563:
   yacc.py:2565:    (91) else_clause -> empty .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 91 (else_clause -> empty .)
   yacc.py:2687:    kELSE           reduce using rule 91 (else_clause -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 243
   yacc.py:2563:
   yacc.py:2565:    (125) factor -> SYS_FUNCT LP args_list RP .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kDIV            reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    DIV             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kMOD            reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kAND            reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    ADD             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    SUBTRACT        reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kOR             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kTHEN           reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    GE              reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    GT              reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    LE              reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    LT              reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    EQUAL           reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    UNEQUAL         reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kDO             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kOF             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    RB              reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    SEMICON         reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kELSE           reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    RP              reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    COMMA           reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kTO             reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2687:    kDOWNTO         reduce using rule 125 (factor -> SYS_FUNCT LP args_list RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 244
   yacc.py:2563:
   yacc.py:2565:    (124) factor -> ID LP args_list RP .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kDIV            reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    DIV             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kMOD            reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kAND            reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    ADD             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    SUBTRACT        reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kOR             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kTHEN           reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    GE              reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    GT              reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    LE              reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    LT              reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    EQUAL           reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    UNEQUAL         reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kDO             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kOF             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    RB              reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    SEMICON         reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kELSE           reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    RP              reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    COMMA           reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kTO             reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2687:    kDOWNTO         reduce using rule 124 (factor -> ID LP args_list RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 245
   yacc.py:2563:
   yacc.py:2565:    (126) factor -> ID LB expression RB .
   yacc.py:2566:
   yacc.py:2687:    MUL             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kDIV            reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    DIV             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kMOD            reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kAND            reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    ADD             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    SUBTRACT        reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kOR             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kTHEN           reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    GE              reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    GT              reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    LE              reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    LT              reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    EQUAL           reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    UNEQUAL         reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kDO             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kOF             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    RB              reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    SEMICON         reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kELSE           reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    RP              reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    COMMA           reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kTO             reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2687:    kDOWNTO         reduce using rule 126 (factor -> ID LB expression RB .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 246
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID ASSIGN expression direction . expression kDO stmt
   yacc.py:2565:    (106) expression -> . expression GE expr
   yacc.py:2565:    (107) expression -> . expression GT expr
   yacc.py:2565:    (108) expression -> . expression LE expr
   yacc.py:2565:    (109) expression -> . expression LT expr
   yacc.py:2565:    (110) expression -> . expression EQUAL expr
   yacc.py:2565:    (111) expression -> . expression UNEQUAL expr
   yacc.py:2565:    (112) expression -> . expr
   yacc.py:2565:    (113) expr -> . expr ADD term
   yacc.py:2565:    (114) expr -> . expr SUBTRACT term
   yacc.py:2565:    (115) expr -> . expr kOR term
   yacc.py:2565:    (116) expr -> . term
   yacc.py:2565:    (117) term -> . term MUL factor
   yacc.py:2565:    (118) term -> . term kDIV factor
   yacc.py:2565:    (119) term -> . term DIV factor
   yacc.py:2565:    (120) term -> . term kMOD factor
   yacc.py:2565:    (121) term -> . term kAND factor
   yacc.py:2565:    (122) term -> . factor
   yacc.py:2565:    (123) factor -> . SYS_FUNCT
   yacc.py:2565:    (124) factor -> . ID LP args_list RP
   yacc.py:2565:    (125) factor -> . SYS_FUNCT LP args_list RP
   yacc.py:2565:    (126) factor -> . ID LB expression RB
   yacc.py:2565:    (127) factor -> . ID
   yacc.py:2565:    (128) factor -> . const_value
   yacc.py:2565:    (129) factor -> . kNOT factor
   yacc.py:2565:    (130) factor -> . SUBTRACT factor
   yacc.py:2565:    (131) factor -> . LP expression RP
   yacc.py:2565:    (132) factor -> . ID DOT ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       shift and go to state 93
   yacc.py:2687:    ID              shift and go to state 94
   yacc.py:2687:    kNOT            shift and go to state 97
   yacc.py:2687:    SUBTRACT        shift and go to state 91
   yacc.py:2687:    LP              shift and go to state 95
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    expression                     shift and go to state 264
   yacc.py:2714:    expr                           shift and go to state 89
   yacc.py:2714:    term                           shift and go to state 90
   yacc.py:2714:    factor                         shift and go to state 92
   yacc.py:2714:    const_value                    shift and go to state 96
   yacc.py:2561:
   yacc.py:2562:state 247
   yacc.py:2563:
   yacc.py:2565:    (95) direction -> kTO .
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    ID              reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    kNOT            reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    SUBTRACT        reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    LP              reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    INTEGER         reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    REAL            reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    CHAR            reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    STRING          reduce using rule 95 (direction -> kTO .)
   yacc.py:2687:    SYS_CON         reduce using rule 95 (direction -> kTO .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 248
   yacc.py:2563:
   yacc.py:2565:    (96) direction -> kDOWNTO .
   yacc.py:2566:
   yacc.py:2687:    SYS_FUNCT       reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    ID              reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    kNOT            reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    SUBTRACT        reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    LP              reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    INTEGER         reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    REAL            reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    CHAR            reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    STRING          reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2687:    SYS_CON         reduce using rule 96 (direction -> kDOWNTO .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 249
   yacc.py:2563:
   yacc.py:2565:    (97) case_stmt -> kCASE expression kOF case_expr_list kEND .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 97 (case_stmt -> kCASE expression kOF case_expr_list kEND .)
   yacc.py:2687:    kELSE           reduce using rule 97 (case_stmt -> kCASE expression kOF case_expr_list kEND .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 250
   yacc.py:2563:
   yacc.py:2565:    (98) case_expr_list -> case_expr_list case_expr .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    ID              reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    kELSE           reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    INTEGER         reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    REAL            reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    CHAR            reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    STRING          reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2687:    SYS_CON         reduce using rule 98 (case_expr_list -> case_expr_list case_expr .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 251
   yacc.py:2563:
   yacc.py:2565:    (100) case_expr -> const_value COLON . stmt SEMICON
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 265
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 252
   yacc.py:2563:
   yacc.py:2565:    (101) case_expr -> ID COLON . stmt SEMICON
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 266
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 253
   yacc.py:2563:
   yacc.py:2565:    (102) case_expr -> kELSE COLON . stmt SEMICON
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 267
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 254
   yacc.py:2563:
   yacc.py:2565:    (52) function_head -> kFUNCTION ID parameters COLON simple_type_decl .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 52 (function_head -> kFUNCTION ID parameters COLON simple_type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 255
   yacc.py:2563:
   yacc.py:2565:    (56) parameters -> LP para_decl_list RP .
   yacc.py:2566:
   yacc.py:2687:    COLON           reduce using rule 56 (parameters -> LP para_decl_list RP .)
   yacc.py:2687:    SEMICON         reduce using rule 56 (parameters -> LP para_decl_list RP .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 256
   yacc.py:2563:
   yacc.py:2565:    (58) para_decl_list -> para_decl_list SEMICON . para_type_list
   yacc.py:2565:    (60) para_type_list -> . var_para_list COLON simple_type_decl
   yacc.py:2565:    (61) para_type_list -> . val_para_list COLON simple_type_decl
   yacc.py:2565:    (62) var_para_list -> . kVAR name_list
   yacc.py:2565:    (63) val_para_list -> . name_list
   yacc.py:2565:    (36) name_list -> . name_list COMMA ID
   yacc.py:2565:    (37) name_list -> . ID
   yacc.py:2566:
   yacc.py:2687:    kVAR            shift and go to state 224
   yacc.py:2687:    ID              shift and go to state 70
   yacc.py:2689:
   yacc.py:2714:    para_type_list                 shift and go to state 268
   yacc.py:2714:    var_para_list                  shift and go to state 222
   yacc.py:2714:    val_para_list                  shift and go to state 223
   yacc.py:2714:    name_list                      shift and go to state 225
   yacc.py:2561:
   yacc.py:2562:state 257
   yacc.py:2563:
   yacc.py:2565:    (60) para_type_list -> var_para_list COLON . simple_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    simple_type_decl               shift and go to state 269
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 258
   yacc.py:2563:
   yacc.py:2565:    (61) para_type_list -> val_para_list COLON . simple_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    simple_type_decl               shift and go to state 270
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 259
   yacc.py:2563:
   yacc.py:2565:    (62) var_para_list -> kVAR name_list .
   yacc.py:2565:    (36) name_list -> name_list . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    COLON           reduce using rule 62 (var_para_list -> kVAR name_list .)
   yacc.py:2687:    COMMA           shift and go to state 111
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 260
   yacc.py:2563:
   yacc.py:2565:    (29) array_type_decl -> kARRAY LB simple_type_decl RB . kOF type_decl
   yacc.py:2566:
   yacc.py:2687:    kOF             shift and go to state 271
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 261
   yacc.py:2563:
   yacc.py:2565:    (34) field_decl -> name_list COLON type_decl . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 272
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 262
   yacc.py:2563:
   yacc.py:2565:    (81) assign_stmt -> ID LB expression RB ASSIGN expression .
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 81 (assign_stmt -> ID LB expression RB ASSIGN expression .)
   yacc.py:2687:    kELSE           reduce using rule 81 (assign_stmt -> ID LB expression RB ASSIGN expression .)
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 263
   yacc.py:2563:
   yacc.py:2565:    (90) else_clause -> kELSE stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 90 (else_clause -> kELSE stmt .)
   yacc.py:2687:    kELSE           reduce using rule 90 (else_clause -> kELSE stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 264
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID ASSIGN expression direction expression . kDO stmt
   yacc.py:2565:    (106) expression -> expression . GE expr
   yacc.py:2565:    (107) expression -> expression . GT expr
   yacc.py:2565:    (108) expression -> expression . LE expr
   yacc.py:2565:    (109) expression -> expression . LT expr
   yacc.py:2565:    (110) expression -> expression . EQUAL expr
   yacc.py:2565:    (111) expression -> expression . UNEQUAL expr
   yacc.py:2566:
   yacc.py:2687:    kDO             shift and go to state 273
   yacc.py:2687:    GE              shift and go to state 135
   yacc.py:2687:    GT              shift and go to state 136
   yacc.py:2687:    LE              shift and go to state 137
   yacc.py:2687:    LT              shift and go to state 138
   yacc.py:2687:    EQUAL           shift and go to state 139
   yacc.py:2687:    UNEQUAL         shift and go to state 140
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 265
   yacc.py:2563:
   yacc.py:2565:    (100) case_expr -> const_value COLON stmt . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 274
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 266
   yacc.py:2563:
   yacc.py:2565:    (101) case_expr -> ID COLON stmt . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 275
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 267
   yacc.py:2563:
   yacc.py:2565:    (102) case_expr -> kELSE COLON stmt . SEMICON
   yacc.py:2566:
   yacc.py:2687:    SEMICON         shift and go to state 276
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 268
   yacc.py:2563:
   yacc.py:2565:    (58) para_decl_list -> para_decl_list SEMICON para_type_list .
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 58 (para_decl_list -> para_decl_list SEMICON para_type_list .)
   yacc.py:2687:    SEMICON         reduce using rule 58 (para_decl_list -> para_decl_list SEMICON para_type_list .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 269
   yacc.py:2563:
   yacc.py:2565:    (60) para_type_list -> var_para_list COLON simple_type_decl .
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 60 (para_type_list -> var_para_list COLON simple_type_decl .)
   yacc.py:2687:    SEMICON         reduce using rule 60 (para_type_list -> var_para_list COLON simple_type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 270
   yacc.py:2563:
   yacc.py:2565:    (61) para_type_list -> val_para_list COLON simple_type_decl .
   yacc.py:2566:
   yacc.py:2687:    RP              reduce using rule 61 (para_type_list -> val_para_list COLON simple_type_decl .)
   yacc.py:2687:    SEMICON         reduce using rule 61 (para_type_list -> val_para_list COLON simple_type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 271
   yacc.py:2563:
   yacc.py:2565:    (29) array_type_decl -> kARRAY LB simple_type_decl RB kOF . type_decl
   yacc.py:2565:    (22) type_decl -> . simple_type_decl
   yacc.py:2565:    (23) type_decl -> . array_type_decl
   yacc.py:2565:    (24) type_decl -> . record_type_decl
   yacc.py:2565:    (25) simple_type_decl -> . SYS_TYPE
   yacc.py:2565:    (26) simple_type_decl -> . LP name_list RP
   yacc.py:2565:    (27) simple_type_decl -> . const_value DOUBLEDOT const_value
   yacc.py:2565:    (28) simple_type_decl -> . ID
   yacc.py:2565:    (29) array_type_decl -> . kARRAY LB simple_type_decl RB kOF type_decl
   yacc.py:2565:    (30) record_type_decl -> . kRECORD field_decl_list kEND
   yacc.py:2565:    (31) record_type_decl -> . kRECORD error kEND
   yacc.py:2565:    (11) const_value -> . INTEGER
   yacc.py:2565:    (12) const_value -> . REAL
   yacc.py:2565:    (13) const_value -> . CHAR
   yacc.py:2565:    (14) const_value -> . STRING
   yacc.py:2565:    (15) const_value -> . SYS_CON
   yacc.py:2566:
   yacc.py:2687:    SYS_TYPE        shift and go to state 119
   yacc.py:2687:    LP              shift and go to state 120
   yacc.py:2687:    ID              shift and go to state 113
   yacc.py:2687:    kARRAY          shift and go to state 122
   yacc.py:2687:    kRECORD         shift and go to state 123
   yacc.py:2687:    INTEGER         shift and go to state 74
   yacc.py:2687:    REAL            shift and go to state 75
   yacc.py:2687:    CHAR            shift and go to state 76
   yacc.py:2687:    STRING          shift and go to state 77
   yacc.py:2687:    SYS_CON         shift and go to state 78
   yacc.py:2689:
   yacc.py:2714:    simple_type_decl               shift and go to state 116
   yacc.py:2714:    type_decl                      shift and go to state 277
   yacc.py:2714:    array_type_decl                shift and go to state 117
   yacc.py:2714:    record_type_decl               shift and go to state 118
   yacc.py:2714:    const_value                    shift and go to state 121
   yacc.py:2561:
   yacc.py:2562:state 272
   yacc.py:2563:
   yacc.py:2565:    (34) field_decl -> name_list COLON type_decl SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 34 (field_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2687:    error           reduce using rule 34 (field_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2687:    ID              reduce using rule 34 (field_decl -> name_list COLON type_decl SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 273
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID ASSIGN expression direction expression kDO . stmt
   yacc.py:2565:    (70) stmt -> . INTEGER COLON non_label_stmt
   yacc.py:2565:    (71) stmt -> . non_label_stmt
   yacc.py:2565:    (72) non_label_stmt -> . assign_stmt
   yacc.py:2565:    (73) non_label_stmt -> . proc_stmt
   yacc.py:2565:    (74) non_label_stmt -> . compound_stmt
   yacc.py:2565:    (75) non_label_stmt -> . if_stmt
   yacc.py:2565:    (76) non_label_stmt -> . repeat_stmt
   yacc.py:2565:    (77) non_label_stmt -> . while_stmt
   yacc.py:2565:    (78) non_label_stmt -> . for_stmt
   yacc.py:2565:    (79) non_label_stmt -> . case_stmt
   yacc.py:2565:    (80) non_label_stmt -> . goto_stmt
   yacc.py:2565:    (81) assign_stmt -> . ID LB expression RB ASSIGN expression
   yacc.py:2565:    (82) assign_stmt -> . ID DOT ID ASSIGN expression
   yacc.py:2565:    (83) assign_stmt -> . ID ASSIGN expression
   yacc.py:2565:    (84) proc_stmt -> . ID
   yacc.py:2565:    (85) proc_stmt -> . ID LP args_list RP
   yacc.py:2565:    (86) proc_stmt -> . SYS_PROC
   yacc.py:2565:    (87) proc_stmt -> . SYS_PROC LP expression_list RP
   yacc.py:2565:    (88) proc_stmt -> . kREAD LP factor RP
   yacc.py:2565:    (65) compound_stmt -> . kBEGIN stmt_list kEND
   yacc.py:2565:    (66) compound_stmt -> . kBEGIN error kEND
   yacc.py:2565:    (89) if_stmt -> . kIF expression kTHEN stmt else_clause
   yacc.py:2565:    (92) repeat_stmt -> . kREPEAT stmt_list kUNTIL expression
   yacc.py:2565:    (93) while_stmt -> . kWHILE expression kDO stmt
   yacc.py:2565:    (94) for_stmt -> . kFOR ID ASSIGN expression direction expression kDO stmt
   yacc.py:2565:    (97) case_stmt -> . kCASE expression kOF case_expr_list kEND
   yacc.py:2565:    (103) goto_stmt -> . kGOTO INTEGER
   yacc.py:2566:
   yacc.py:2687:    INTEGER         shift and go to state 37
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2687:    SYS_PROC        shift and go to state 49
   yacc.py:2687:    kREAD           shift and go to state 50
   yacc.py:2687:    kBEGIN          shift and go to state 13
   yacc.py:2687:    kIF             shift and go to state 51
   yacc.py:2687:    kREPEAT         shift and go to state 52
   yacc.py:2687:    kWHILE          shift and go to state 53
   yacc.py:2687:    kFOR            shift and go to state 54
   yacc.py:2687:    kCASE           shift and go to state 55
   yacc.py:2687:    kGOTO           shift and go to state 56
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 278
   yacc.py:2714:    non_label_stmt                 shift and go to state 38
   yacc.py:2714:    assign_stmt                    shift and go to state 39
   yacc.py:2714:    proc_stmt                      shift and go to state 40
   yacc.py:2714:    compound_stmt                  shift and go to state 41
   yacc.py:2714:    if_stmt                        shift and go to state 42
   yacc.py:2714:    repeat_stmt                    shift and go to state 43
   yacc.py:2714:    while_stmt                     shift and go to state 44
   yacc.py:2714:    for_stmt                       shift and go to state 45
   yacc.py:2714:    case_stmt                      shift and go to state 46
   yacc.py:2714:    goto_stmt                      shift and go to state 47
   yacc.py:2561:
   yacc.py:2562:state 274
   yacc.py:2563:
   yacc.py:2565:    (100) case_expr -> const_value COLON stmt SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    ID              reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    kELSE           reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    INTEGER         reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    REAL            reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    CHAR            reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    STRING          reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2687:    SYS_CON         reduce using rule 100 (case_expr -> const_value COLON stmt SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 275
   yacc.py:2563:
   yacc.py:2565:    (101) case_expr -> ID COLON stmt SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    ID              reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    kELSE           reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    INTEGER         reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    REAL            reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    CHAR            reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    STRING          reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2687:    SYS_CON         reduce using rule 101 (case_expr -> ID COLON stmt SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 276
   yacc.py:2563:
   yacc.py:2565:    (102) case_expr -> kELSE COLON stmt SEMICON .
   yacc.py:2566:
   yacc.py:2687:    kEND            reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    ID              reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    kELSE           reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    INTEGER         reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    REAL            reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    CHAR            reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    STRING          reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2687:    SYS_CON         reduce using rule 102 (case_expr -> kELSE COLON stmt SEMICON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 277
   yacc.py:2563:
   yacc.py:2565:    (29) array_type_decl -> kARRAY LB simple_type_decl RB kOF type_decl .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 29 (array_type_decl -> kARRAY LB simple_type_decl RB kOF type_decl .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 278
   yacc.py:2563:
   yacc.py:2565:    (94) for_stmt -> kFOR ID ASSIGN expression direction expression kDO stmt .
   yacc.py:2566:
   yacc.py:2687:    SEMICON         reduce using rule 94 (for_stmt -> kFOR ID ASSIGN expression direction expression kDO stmt .)
   yacc.py:2687:    kELSE           reduce using rule 94 (for_stmt -> kFOR ID ASSIGN expression direction expression kDO stmt .)
   yacc.py:2689:
   yacc.py:3457:
   yacc.py:3458:Conflicts:
   yacc.py:3459:
   yacc.py:3462:shift/reduce conflict for error in state 13 resolved as shift
   yacc.py:3462:shift/reduce conflict for kFUNCTION in state 25 resolved as shift
   yacc.py:3462:shift/reduce conflict for kPROCEDURE in state 25 resolved as shift
   yacc.py:3462:shift/reduce conflict for kELSE in state 187 resolved as shift
   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : . LexToken(kPROGRAM,'program',1,0)
   yacc.py: 445:Action : Shift and goto state 3
   yacc.py: 410:
   yacc.py: 411:State  : 3
   yacc.py: 435:Stack  : kPROGRAM . LexToken(ID,'control',1,8)
   yacc.py: 445:Action : Shift and goto state 9
   yacc.py: 410:
   yacc.py: 411:State  : 9
   yacc.py: 435:Stack  : kPROGRAM ID . LexToken(SEMICON,';',1,15)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : kPROGRAM ID SEMICON . LexToken(kCONST,'const',2,17)
   yacc.py: 471:Action : Reduce rule [program_head -> kPROGRAM ID SEMICON] with ['program','control',';'] and goto state 2
   yacc.py: 506:Result : <str @ 0x10797c618> ('control')
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 435:Stack  : program_head . LexToken(kCONST,'const',2,17)
   yacc.py: 445:Action : Shift and goto state 7
   yacc.py: 410:
   yacc.py: 411:State  : 7
   yacc.py: 435:Stack  : program_head kCONST . LexToken(ID,'p',2,23)
   yacc.py: 445:Action : Shift and goto state 19
   yacc.py: 410:
   yacc.py: 411:State  : 19
   yacc.py: 435:Stack  : program_head kCONST ID . LexToken(EQUAL,'=',2,25)
   yacc.py: 445:Action : Shift and goto state 32
   yacc.py: 410:
   yacc.py: 411:State  : 32
   yacc.py: 435:Stack  : program_head kCONST ID EQUAL . LexToken(INTEGER,1,2,27)
   yacc.py: 445:Action : Shift and goto state 74
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 435:Stack  : program_head kCONST ID EQUAL INTEGER . LexToken(SEMICON,';',2,28)
   yacc.py: 471:Action : Reduce rule [const_value -> INTEGER] with [1] and goto state 73
   yacc.py: 506:Result : <Node @ 0x10797c710> (<AST.Node object at 0x10797c710>)
   yacc.py: 410:
   yacc.py: 411:State  : 73
   yacc.py: 435:Stack  : program_head kCONST ID EQUAL const_value . LexToken(SEMICON,';',2,28)
   yacc.py: 445:Action : Shift and goto state 124
   yacc.py: 410:
   yacc.py: 411:State  : 124
   yacc.py: 435:Stack  : program_head kCONST ID EQUAL const_value SEMICON . LexToken(kVAR,'var',3,30)
   yacc.py: 471:Action : Reduce rule [const_expr -> ID EQUAL const_value SEMICON] with ['p','=',<Node @ 0x10797c710>,';'] and goto state 18
   yacc.py: 506:Result : <Node @ 0x10797c588> (<AST.Node object at 0x10797c588>)
   yacc.py: 410:
   yacc.py: 411:State  : 18
   yacc.py: 435:Stack  : program_head kCONST const_expr . LexToken(kVAR,'var',3,30)
   yacc.py: 471:Action : Reduce rule [const_expr_list -> const_expr] with [<Node @ 0x10797c588>] and goto state 17
   yacc.py: 506:Result : <Node @ 0x10797c588> (<AST.Node object at 0x10797c588>)
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 435:Stack  : program_head kCONST const_expr_list . LexToken(kVAR,'var',3,30)
   yacc.py: 471:Action : Reduce rule [const_part -> kCONST const_expr_list] with ['const',<Node @ 0x10797c588>] and goto state 6
   yacc.py: 506:Result : <Node @ 0x10797c588> (<AST.Node object at 0x10797c588>)
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 435:Stack  : program_head const_part . LexToken(kVAR,'var',3,30)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 16
   yacc.py: 548:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 435:Stack  : program_head const_part empty . LexToken(kVAR,'var',3,30)
   yacc.py: 471:Action : Reduce rule [type_part -> empty] with [None] and goto state 14
   yacc.py: 506:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 435:Stack  : program_head const_part type_part . LexToken(kVAR,'var',3,30)
   yacc.py: 445:Action : Shift and goto state 26
   yacc.py: 410:
   yacc.py: 411:State  : 26
   yacc.py: 435:Stack  : program_head const_part type_part kVAR . LexToken(ID,'m',4,38)
   yacc.py: 445:Action : Shift and goto state 70
   yacc.py: 410:
   yacc.py: 411:State  : 70
   yacc.py: 435:Stack  : program_head const_part type_part kVAR ID . LexToken(COMMA,',',4,39)
   yacc.py: 471:Action : Reduce rule [name_list -> ID] with ['m'] and goto state 68
   yacc.py: 506:Result : <str @ 0x106e9f1f0> ('m')
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list . LexToken(COMMA,',',4,39)
   yacc.py: 445:Action : Shift and goto state 111
   yacc.py: 410:
   yacc.py: 411:State  : 111
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA . LexToken(ID,'n',4,40)
   yacc.py: 445:Action : Shift and goto state 170
   yacc.py: 410:
   yacc.py: 411:State  : 170
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA ID . LexToken(COMMA,',',4,41)
   yacc.py: 471:Action : Reduce rule [name_list -> name_list COMMA ID] with ['m',',','n'] and goto state 68
   yacc.py: 506:Result : <Node @ 0x10797c550> (<AST.Node object at 0x10797c550>)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list . LexToken(COMMA,',',4,41)
   yacc.py: 445:Action : Shift and goto state 111
   yacc.py: 410:
   yacc.py: 411:State  : 111
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA . LexToken(ID,'a',4,42)
   yacc.py: 445:Action : Shift and goto state 170
   yacc.py: 410:
   yacc.py: 411:State  : 170
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA ID . LexToken(COMMA,',',4,43)
   yacc.py: 471:Action : Reduce rule [name_list -> name_list COMMA ID] with [<Node @ 0x10797c550>,',','a'] and goto state 68
   yacc.py: 506:Result : <Node @ 0x10797c5f8> (<AST.Node object at 0x10797c5f8>)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list . LexToken(COMMA,',',4,43)
   yacc.py: 445:Action : Shift and goto state 111
   yacc.py: 410:
   yacc.py: 411:State  : 111
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA . LexToken(ID,'b',4,44)
   yacc.py: 445:Action : Shift and goto state 170
   yacc.py: 410:
   yacc.py: 411:State  : 170
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA ID . LexToken(COMMA,',',4,45)
   yacc.py: 471:Action : Reduce rule [name_list -> name_list COMMA ID] with [<Node @ 0x10797c5f8>,',','b'] and goto state 68
   yacc.py: 506:Result : <Node @ 0x10797c6d8> (<AST.Node object at 0x10797c6d8>)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list . LexToken(COMMA,',',4,45)
   yacc.py: 445:Action : Shift and goto state 111
   yacc.py: 410:
   yacc.py: 411:State  : 111
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA . LexToken(ID,'r',4,46)
   yacc.py: 445:Action : Shift and goto state 170
   yacc.py: 410:
   yacc.py: 411:State  : 170
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COMMA ID . LexToken(COLON,':',4,47)
   yacc.py: 471:Action : Reduce rule [name_list -> name_list COMMA ID] with [<Node @ 0x10797c6d8>,',','r'] and goto state 68
   yacc.py: 506:Result : <Node @ 0x10797c518> (<AST.Node object at 0x10797c518>)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list . LexToken(COLON,':',4,47)
   yacc.py: 445:Action : Shift and goto state 110
   yacc.py: 410:
   yacc.py: 411:State  : 110
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COLON . LexToken(SYS_TYPE,'integer',4,49)
   yacc.py: 445:Action : Shift and goto state 119
   yacc.py: 410:
   yacc.py: 411:State  : 119
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COLON SYS_TYPE . LexToken(SEMICON,';',4,56)
   yacc.py: 471:Action : Reduce rule [simple_type_decl -> SYS_TYPE] with ['integer'] and goto state 116
   yacc.py: 506:Result : <Node @ 0x10797c470> (<AST.Node object at 0x10797c470>)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 430:Defaulted state 116: Reduce using 22
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COLON simple_type_decl . LexToken(SEMICON,';',4,56)
   yacc.py: 471:Action : Reduce rule [type_decl -> simple_type_decl] with [<Node @ 0x10797c470>] and goto state 169
   yacc.py: 506:Result : <Node @ 0x10797c470> (<AST.Node object at 0x10797c470>)
   yacc.py: 410:
   yacc.py: 411:State  : 169
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COLON type_decl . LexToken(SEMICON,';',4,56)
   yacc.py: 445:Action : Shift and goto state 226
   yacc.py: 410:
   yacc.py: 411:State  : 226
   yacc.py: 435:Stack  : program_head const_part type_part kVAR name_list COLON type_decl SEMICON . LexToken(ID,'s',5,62)
   yacc.py: 471:Action : Reduce rule [var_decl -> name_list COLON type_decl SEMICON] with [<Node @ 0x10797c518>,':',<Node @ 0x10797c470>,';'] and goto state 67
   yacc.py: 506:Result : <Node @ 0x107945390> (<AST.Node object at 0x107945390>)
   yacc.py: 410:
   yacc.py: 411:State  : 67
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl . LexToken(ID,'s',5,62)
   yacc.py: 471:Action : Reduce rule [var_decl_list -> var_decl] with [<Node @ 0x107945390>] and goto state 66
   yacc.py: 506:Result : <Node @ 0x107945390> (<AST.Node object at 0x107945390>)
   yacc.py: 410:
   yacc.py: 411:State  : 66
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list . LexToken(ID,'s',5,62)
   yacc.py: 445:Action : Shift and goto state 70
   yacc.py: 410:
   yacc.py: 411:State  : 70
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list ID . LexToken(COLON,':',5,63)
   yacc.py: 471:Action : Reduce rule [name_list -> ID] with ['s'] and goto state 68
   yacc.py: 506:Result : <str @ 0x106f77148> ('s')
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list name_list . LexToken(COLON,':',5,63)
   yacc.py: 445:Action : Shift and goto state 110
   yacc.py: 410:
   yacc.py: 411:State  : 110
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list name_list COLON . LexToken(SYS_TYPE,'real',5,65)
   yacc.py: 445:Action : Shift and goto state 119
   yacc.py: 410:
   yacc.py: 411:State  : 119
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list name_list COLON SYS_TYPE . LexToken(SEMICON,';',5,69)
   yacc.py: 471:Action : Reduce rule [simple_type_decl -> SYS_TYPE] with ['real'] and goto state 116
   yacc.py: 506:Result : <Node @ 0x1077dedd8> (<AST.Node object at 0x1077dedd8>)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 430:Defaulted state 116: Reduce using 22
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list name_list COLON simple_type_decl . LexToken(SEMICON,';',5,69)
   yacc.py: 471:Action : Reduce rule [type_decl -> simple_type_decl] with [<Node @ 0x1077dedd8>] and goto state 169
   yacc.py: 506:Result : <Node @ 0x1077dedd8> (<AST.Node object at 0x1077dedd8>)
   yacc.py: 410:
   yacc.py: 411:State  : 169
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list name_list COLON type_decl . LexToken(SEMICON,';',5,69)
   yacc.py: 445:Action : Shift and goto state 226
   yacc.py: 410:
   yacc.py: 411:State  : 226
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list name_list COLON type_decl SEMICON . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 471:Action : Reduce rule [var_decl -> name_list COLON type_decl SEMICON] with ['s',':',<Node @ 0x1077dedd8>,';'] and goto state 109
   yacc.py: 506:Result : <Node @ 0x1077de048> (<AST.Node object at 0x1077de048>)
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list var_decl . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 471:Action : Reduce rule [var_decl_list -> var_decl_list var_decl] with [<Node @ 0x107945390>,<Node @ 0x1077de048>] and goto state 66
   yacc.py: 506:Result : <Node @ 0x1077dee10> (<AST.Node object at 0x1077dee10>)
   yacc.py: 410:
   yacc.py: 411:State  : 66
   yacc.py: 435:Stack  : program_head const_part type_part kVAR var_decl_list . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 471:Action : Reduce rule [var_part -> kVAR var_decl_list] with ['var',<Node @ 0x1077dee10>] and goto state 25
   yacc.py: 506:Result : <Node @ 0x1077dee10> (<AST.Node object at 0x1077dee10>)
   yacc.py: 410:
   yacc.py: 411:State  : 25
   yacc.py: 435:Stack  : program_head const_part type_part var_part . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 61
   yacc.py: 548:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 61
   yacc.py: 435:Stack  : program_head const_part type_part var_part empty . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 471:Action : Reduce rule [routine_part -> empty] with [None] and goto state 58
   yacc.py: 506:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 58
   yacc.py: 435:Stack  : program_head const_part type_part var_part routine_part . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 471:Action : Reduce rule [routine_head -> const_part type_part var_part routine_part] with [<Node @ 0x10797c588>,None,<Node @ 0x1077dee10>,None] and goto state 5
   yacc.py: 506:Result : <Node @ 0x10797c6a0> (<AST.Node object at 0x10797c6a0>)
   yacc.py: 410:
   yacc.py: 411:State  : 5
   yacc.py: 435:Stack  : program_head routine_head . LexToken(kBEGIN,'begin',6,71)
   yacc.py: 445:Action : Shift and goto state 13
   yacc.py: 410:
   yacc.py: 411:State  : 13
   yacc.py: 435:Stack  : program_head routine_head kBEGIN . LexToken(ID,'a',7,81)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 24
   yacc.py: 548:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 435:Stack  : program_head routine_head kBEGIN empty . LexToken(ID,'a',7,81)
   yacc.py: 471:Action : Reduce rule [stmt_list -> empty] with [None] and goto state 22
   yacc.py: 506:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 22
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list . LexToken(ID,'a',7,81)
   yacc.py: 445:Action : Shift and goto state 48
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID . LexToken(ASSIGN,':=',7,83)
   yacc.py: 445:Action : Shift and goto state 83
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN . LexToken(ID,'m',7,86)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN ID . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['m'] and goto state 92
   yacc.py: 506:Result : <str @ 0x106e9f1f0> ('m')
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN factor . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [term -> factor] with ['m'] and goto state 90
   yacc.py: 506:Result : <str @ 0x106e9f1f0> ('m')
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN term . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [expr -> term] with ['m'] and goto state 89
   yacc.py: 506:Result : <str @ 0x106e9f1f0> ('m')
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN expr . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [expression -> expr] with ['m'] and goto state 127
   yacc.py: 506:Result : <Node @ 0x107945358> (<AST.Node object at 0x107945358>)
   yacc.py: 410:
   yacc.py: 411:State  : 127
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN expression . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [assign_stmt -> ID ASSIGN expression] with ['a',':=',<Node @ 0x107945358>] and goto state 39
   yacc.py: 506:Result : <Node @ 0x107945fd0> (<AST.Node object at 0x107945fd0>)
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list assign_stmt . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [non_label_stmt -> assign_stmt] with [<Node @ 0x107945fd0>] and goto state 38
   yacc.py: 506:Result : <Node @ 0x107945fd0> (<AST.Node object at 0x107945fd0>)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list non_label_stmt . LexToken(SEMICON,';',7,87)
   yacc.py: 471:Action : Reduce rule [stmt -> non_label_stmt] with [<Node @ 0x107945fd0>] and goto state 35
   yacc.py: 506:Result : <Node @ 0x107945fd0> (<AST.Node object at 0x107945fd0>)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list stmt . LexToken(SEMICON,';',7,87)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list stmt SEMICON . LexToken(ID,'b',8,93)
   yacc.py: 471:Action : Reduce rule [stmt_list -> stmt_list stmt SEMICON] with [None,<Node @ 0x107945fd0>,';'] and goto state 22
   yacc.py: 506:Result : <Node @ 0x107024ef0> (<AST.Node object at 0x107024ef0>)
   yacc.py: 410:
   yacc.py: 411:State  : 22
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list . LexToken(ID,'b',8,93)
   yacc.py: 445:Action : Shift and goto state 48
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID . LexToken(ASSIGN,':=',8,95)
   yacc.py: 445:Action : Shift and goto state 83
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN . LexToken(ID,'n',8,98)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN ID . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['n'] and goto state 92
   yacc.py: 506:Result : <str @ 0x106f7cc38> ('n')
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN factor . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [term -> factor] with ['n'] and goto state 90
   yacc.py: 506:Result : <str @ 0x106f7cc38> ('n')
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN term . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [expr -> term] with ['n'] and goto state 89
   yacc.py: 506:Result : <str @ 0x106f7cc38> ('n')
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN expr . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [expression -> expr] with ['n'] and goto state 127
   yacc.py: 506:Result : <Node @ 0x107411240> (<AST.Node object at 0x107411240>)
   yacc.py: 410:
   yacc.py: 411:State  : 127
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list ID ASSIGN expression . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [assign_stmt -> ID ASSIGN expression] with ['b',':=',<Node @ 0x107411240>] and goto state 39
   yacc.py: 506:Result : <Node @ 0x107945eb8> (<AST.Node object at 0x107945eb8>)
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list assign_stmt . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [non_label_stmt -> assign_stmt] with [<Node @ 0x107945eb8>] and goto state 38
   yacc.py: 506:Result : <Node @ 0x107945eb8> (<AST.Node object at 0x107945eb8>)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list non_label_stmt . LexToken(SEMICON,';',8,99)
   yacc.py: 471:Action : Reduce rule [stmt -> non_label_stmt] with [<Node @ 0x107945eb8>] and goto state 35
   yacc.py: 506:Result : <Node @ 0x107945eb8> (<AST.Node object at 0x107945eb8>)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list stmt . LexToken(SEMICON,';',8,99)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list stmt SEMICON . LexToken(kREPEAT,'repeat',9,105)
   yacc.py: 471:Action : Reduce rule [stmt_list -> stmt_list stmt SEMICON] with [<Node @ 0x107024ef0>,<Node @ 0x107945eb8>,';'] and goto state 22
   yacc.py: 506:Result : <Node @ 0x10797c4e0> (<AST.Node object at 0x10797c4e0>)
   yacc.py: 410:
   yacc.py: 411:State  : 22
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list . LexToken(kREPEAT,'repeat',9,105)
   yacc.py: 445:Action : Shift and goto state 52
   yacc.py: 410:
   yacc.py: 411:State  : 52
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT . LexToken(ID,'r',10,120)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 24
   yacc.py: 548:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT empty . LexToken(ID,'r',10,120)
   yacc.py: 471:Action : Reduce rule [stmt_list -> empty] with [None] and goto state 98
   yacc.py: 506:Result : <NoneType @ 0x106cf9f78> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list . LexToken(ID,'r',10,120)
   yacc.py: 445:Action : Shift and goto state 48
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID . LexToken(ASSIGN,':=',10,122)
   yacc.py: 445:Action : Shift and goto state 83
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN . LexToken(ID,'a',10,125)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN ID . LexToken(DIV,'/',10,127)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['a'] and goto state 92
   yacc.py: 506:Result : <str @ 0x107005e30> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN factor . LexToken(DIV,'/',10,127)
   yacc.py: 471:Action : Reduce rule [term -> factor] with ['a'] and goto state 90
   yacc.py: 506:Result : <str @ 0x107005e30> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term . LexToken(DIV,'/',10,127)
   yacc.py: 445:Action : Shift and goto state 146
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term DIV . LexToken(ID,'b',10,129)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term DIV ID . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['b'] and goto state 199
   yacc.py: 506:Result : <str @ 0x106f55998> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 199
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term DIV factor . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [term -> term DIV factor] with ['a','/','b'] and goto state 90
   yacc.py: 506:Result : <Node @ 0x10785dc18> (<AST.Node object at 0x10785dc18>)
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [expr -> term] with [<Node @ 0x10785dc18>] and goto state 89
   yacc.py: 506:Result : <Node @ 0x10785dc18> (<AST.Node object at 0x10785dc18>)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN expr . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [expression -> expr] with [<Node @ 0x10785dc18>] and goto state 127
   yacc.py: 506:Result : <Node @ 0x107406dd8> (<AST.Node object at 0x107406dd8>)
   yacc.py: 410:
   yacc.py: 411:State  : 127
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN expression . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [assign_stmt -> ID ASSIGN expression] with ['r',':=',<Node @ 0x107406dd8>] and goto state 39
   yacc.py: 506:Result : <Node @ 0x1077f05c0> (<AST.Node object at 0x1077f05c0>)
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list assign_stmt . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [non_label_stmt -> assign_stmt] with [<Node @ 0x1077f05c0>] and goto state 38
   yacc.py: 506:Result : <Node @ 0x1077f05c0> (<AST.Node object at 0x1077f05c0>)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list non_label_stmt . LexToken(SEMICON,';',10,130)
   yacc.py: 471:Action : Reduce rule [stmt -> non_label_stmt] with [<Node @ 0x1077f05c0>] and goto state 35
   yacc.py: 506:Result : <Node @ 0x1077f05c0> (<AST.Node object at 0x1077f05c0>)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list stmt . LexToken(SEMICON,';',10,130)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list stmt SEMICON . LexToken(ID,'a',11,140)
   yacc.py: 471:Action : Reduce rule [stmt_list -> stmt_list stmt SEMICON] with [None,<Node @ 0x1077f05c0>,';'] and goto state 98
   yacc.py: 506:Result : <Node @ 0x1078267f0> (<AST.Node object at 0x1078267f0>)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list . LexToken(ID,'a',11,140)
   yacc.py: 445:Action : Shift and goto state 48
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID . LexToken(ASSIGN,':=',11,142)
   yacc.py: 445:Action : Shift and goto state 83
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN . LexToken(ID,'b',11,145)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN ID . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['b'] and goto state 92
   yacc.py: 506:Result : <str @ 0x106f55998> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN factor . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [term -> factor] with ['b'] and goto state 90
   yacc.py: 506:Result : <str @ 0x106f55998> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [expr -> term] with ['b'] and goto state 89
   yacc.py: 506:Result : <str @ 0x106f55998> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN expr . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [expression -> expr] with ['b'] and goto state 127
   yacc.py: 506:Result : <Node @ 0x107409e10> (<AST.Node object at 0x107409e10>)
   yacc.py: 410:
   yacc.py: 411:State  : 127
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN expression . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [assign_stmt -> ID ASSIGN expression] with ['a',':=',<Node @ 0x107409e10>] and goto state 39
   yacc.py: 506:Result : <Node @ 0x1077f0f60> (<AST.Node object at 0x1077f0f60>)
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list assign_stmt . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [non_label_stmt -> assign_stmt] with [<Node @ 0x1077f0f60>] and goto state 38
   yacc.py: 506:Result : <Node @ 0x1077f0f60> (<AST.Node object at 0x1077f0f60>)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list non_label_stmt . LexToken(SEMICON,';',11,146)
   yacc.py: 471:Action : Reduce rule [stmt -> non_label_stmt] with [<Node @ 0x1077f0f60>] and goto state 35
   yacc.py: 506:Result : <Node @ 0x1077f0f60> (<AST.Node object at 0x1077f0f60>)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list stmt . LexToken(SEMICON,';',11,146)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list stmt SEMICON . LexToken(ID,'b',11,148)
   yacc.py: 471:Action : Reduce rule [stmt_list -> stmt_list stmt SEMICON] with [<Node @ 0x1078267f0>,<Node @ 0x1077f0f60>,';'] and goto state 98
   yacc.py: 506:Result : <Node @ 0x1077f0eb8> (<AST.Node object at 0x1077f0eb8>)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list . LexToken(ID,'b',11,148)
   yacc.py: 445:Action : Shift and goto state 48
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID . LexToken(ASSIGN,':=',11,150)
   yacc.py: 445:Action : Shift and goto state 83
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN . LexToken(ID,'r',11,153)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN ID . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['r'] and goto state 92
   yacc.py: 506:Result : <str @ 0x106ed5ce0> ('r')
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN factor . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [term -> factor] with ['r'] and goto state 90
   yacc.py: 506:Result : <str @ 0x106ed5ce0> ('r')
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN term . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [expr -> term] with ['r'] and goto state 89
   yacc.py: 506:Result : <str @ 0x106ed5ce0> ('r')
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN expr . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [expression -> expr] with ['r'] and goto state 127
   yacc.py: 506:Result : <Node @ 0x10785def0> (<AST.Node object at 0x10785def0>)
   yacc.py: 410:
   yacc.py: 411:State  : 127
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list ID ASSIGN expression . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [assign_stmt -> ID ASSIGN expression] with ['b',':=',<Node @ 0x10785def0>] and goto state 39
   yacc.py: 506:Result : <Node @ 0x10780b4a8> (<AST.Node object at 0x10780b4a8>)
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list assign_stmt . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [non_label_stmt -> assign_stmt] with [<Node @ 0x10780b4a8>] and goto state 38
   yacc.py: 506:Result : <Node @ 0x10780b4a8> (<AST.Node object at 0x10780b4a8>)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list non_label_stmt . LexToken(SEMICON,';',11,154)
   yacc.py: 471:Action : Reduce rule [stmt -> non_label_stmt] with [<Node @ 0x10780b4a8>] and goto state 35
   yacc.py: 506:Result : <Node @ 0x10780b4a8> (<AST.Node object at 0x10780b4a8>)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list stmt . LexToken(SEMICON,';',11,154)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list stmt SEMICON . LexToken(kUNTIL,'until',12,160)
   yacc.py: 471:Action : Reduce rule [stmt_list -> stmt_list stmt SEMICON] with [<Node @ 0x1077f0eb8>,<Node @ 0x10780b4a8>,';'] and goto state 98
   yacc.py: 506:Result : <Node @ 0x1079f3828> (<AST.Node object at 0x1079f3828>)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list . LexToken(kUNTIL,'until',12,160)
   yacc.py: 445:Action : Shift and goto state 156
   yacc.py: 410:
   yacc.py: 411:State  : 156
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL . LexToken(ID,'r',12,166)
   yacc.py: 445:Action : Shift and goto state 94
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL ID . LexToken(EQUAL,'=',12,168)
   yacc.py: 471:Action : Reduce rule [factor -> ID] with ['r'] and goto state 92
   yacc.py: 506:Result : <str @ 0x106ed5ce0> ('r')
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL factor . LexToken(EQUAL,'=',12,168)
   yacc.py: 471:Action : Reduce rule [term -> factor] with ['r'] and goto state 90
   yacc.py: 506:Result : <str @ 0x106ed5ce0> ('r')
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL term . LexToken(EQUAL,'=',12,168)
   yacc.py: 471:Action : Reduce rule [expr -> term] with ['r'] and goto state 89
   yacc.py: 506:Result : <str @ 0x106ed5ce0> ('r')
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expr . LexToken(EQUAL,'=',12,168)
   yacc.py: 471:Action : Reduce rule [expression -> expr] with ['r'] and goto state 207
   yacc.py: 506:Result : <Node @ 0x1078135c0> (<AST.Node object at 0x1078135c0>)
   yacc.py: 410:
   yacc.py: 411:State  : 207
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression . LexToken(EQUAL,'=',12,168)
   yacc.py: 445:Action : Shift and goto state 139
   yacc.py: 410:
   yacc.py: 411:State  : 139
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression EQUAL . LexToken(INTEGER,0,12,170)
   yacc.py: 445:Action : Shift and goto state 74
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression EQUAL INTEGER . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [const_value -> INTEGER] with [0] and goto state 96
   yacc.py: 506:Result : <Node @ 0x10780bba8> (<AST.Node object at 0x10780bba8>)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression EQUAL const_value . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [factor -> const_value] with [<Node @ 0x10780bba8>] and goto state 92
   yacc.py: 506:Result : <Node @ 0x10780bba8> (<AST.Node object at 0x10780bba8>)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression EQUAL factor . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [term -> factor] with [<Node @ 0x10780bba8>] and goto state 90
   yacc.py: 506:Result : <Node @ 0x10780bba8> (<AST.Node object at 0x10780bba8>)
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression EQUAL term . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [expr -> term] with [<Node @ 0x10780bba8>] and goto state 192
   yacc.py: 506:Result : <Node @ 0x10780bba8> (<AST.Node object at 0x10780bba8>)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression EQUAL expr . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [expression -> expression EQUAL expr] with [<Node @ 0x1078135c0>,'=',<Node @ 0x10780bba8>] and goto state 207
   yacc.py: 506:Result : <Node @ 0x1079f3898> (<AST.Node object at 0x1079f3898>)
   yacc.py: 410:
   yacc.py: 411:State  : 207
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kREPEAT stmt_list kUNTIL expression . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [repeat_stmt -> kREPEAT stmt_list kUNTIL expression] with ['repeat',<Node @ 0x1079f3828>,'until',<Node @ 0x1079f3898>] and goto state 43
   yacc.py: 506:Result : <Node @ 0x1079f3748> (<AST.Node object at 0x1079f3748>)
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list repeat_stmt . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [non_label_stmt -> repeat_stmt] with [<Node @ 0x1079f3748>] and goto state 38
   yacc.py: 506:Result : <Node @ 0x1079f3748> (<AST.Node object at 0x1079f3748>)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list non_label_stmt . LexToken(SEMICON,';',12,171)
   yacc.py: 471:Action : Reduce rule [stmt -> non_label_stmt] with [<Node @ 0x1079f3748>] and goto state 35
   yacc.py: 506:Result : <Node @ 0x1079f3748> (<AST.Node object at 0x1079f3748>)
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list stmt . LexToken(SEMICON,';',12,171)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list stmt SEMICON . LexToken(kEND,'end',13,173)
   yacc.py: 471:Action : Reduce rule [stmt_list -> stmt_list stmt SEMICON] with [<Node @ 0x10797c4e0>,<Node @ 0x1079f3748>,';'] and goto state 22
   yacc.py: 506:Result : <Node @ 0x1079f35f8> (<AST.Node object at 0x1079f35f8>)
   yacc.py: 410:
   yacc.py: 411:State  : 22
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list . LexToken(kEND,'end',13,173)
   yacc.py: 445:Action : Shift and goto state 34
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : program_head routine_head kBEGIN stmt_list kEND . LexToken(DOT,'.',13,176)
   yacc.py: 471:Action : Reduce rule [compound_stmt -> kBEGIN stmt_list kEND] with ['begin',<Node @ 0x1079f35f8>,'end'] and goto state 12
   yacc.py: 506:Result : <Node @ 0x1079f35f8> (<AST.Node object at 0x1079f35f8>)
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : program_head routine_head compound_stmt . LexToken(DOT,'.',13,176)
   yacc.py: 471:Action : Reduce rule [routine_body -> compound_stmt] with [<Node @ 0x1079f35f8>] and goto state 11
   yacc.py: 506:Result : <Node @ 0x1079f35f8> (<AST.Node object at 0x1079f35f8>)
   yacc.py: 410:
   yacc.py: 411:State  : 11
   yacc.py: 435:Stack  : program_head routine_head routine_body . LexToken(DOT,'.',13,176)
   yacc.py: 471:Action : Reduce rule [routine -> routine_head routine_body] with [<Node @ 0x10797c6a0>,<Node @ 0x1079f35f8>] and goto state 4
   yacc.py: 506:Result : <Node @ 0x1077f0630> (<AST.Node object at 0x1077f0630>)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : program_head routine . LexToken(DOT,'.',13,176)
   yacc.py: 445:Action : Shift and goto state 10
   yacc.py: 410:
   yacc.py: 411:State  : 10
   yacc.py: 430:Defaulted state 10: Reduce using 1
   yacc.py: 435:Stack  : program_head routine DOT . None
   yacc.py: 471:Action : Reduce rule [program -> program_head routine DOT] with ['control',<Node @ 0x1077f0630>,'.'] and goto state 1
   yacc.py: 506:Result : <Node @ 0x10797c4a8> (<AST.Node object at 0x10797c4a8>)
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : program . $end
   yacc.py: 571:Done   : Returning <Node @ 0x10797c4a8> (<AST.Node object at 0x10797c4a8>)
   yacc.py: 572:PLY: PARSE DEBUG END
